<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sandcastle.Core</name>
    </assembly>
    <members>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponentUtilities">
            <summary>
            This class contains a set of utility extension methods that can be used by build components
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponentUtilities.GetExceptionMessage(System.Exception)">
            <summary>
            This is used to get the message strings from an exception and any of its inner exceptions
            </summary>
            <param name="exception">The exception from which to get the message</param>
            <returns>The exception message along with any inner exception messages</returns>
            <remarks><see cref="T:System.Xml.XmlException"/> and <see cref="T:System.Xml.Xsl.XsltException"/> messages will be returned with
            line number, line position, and source URI information.</remarks>
            <exception cref="T:System.ArgumentNullException">This is thrown if the <paramref name="exception"/> argument
            is null</exception>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponentUtilities.GetInnerXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            This is used to get the inner XML of a node without changing the spacing
            </summary>
            <param name="node">The node from which to get the inner XML</param>
            <returns>The inner XML as a string with its spacing preserved</returns>
            <exception cref="T:System.ArgumentNullException">This is thrown if the <paramref name="node"/> parameter
            is null.</exception>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponentUtilities.ToArray(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Convert an XPath node iterator to an array
            </summary>
            <param name="iterator">The XPath iterator to convert to an array</param>
            <returns>An array with the cloned nodes from the iterator</returns>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponentUtilities.EvalXPathExpr(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.XPathExpression,Sandcastle.Core.BuildAssembler.CustomContext)">
            <summary>
            This is used to get the string result from evaluating an XPath expression against the given
            document and context.
            </summary>
            <param name="document">The document to use</param>
            <param name="expression">The XPath expression to evaluate</param>
            <param name="context">The context to use</param>
            <returns>The evaluated expression result</returns>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponentUtilities.EvalXPathExpr(System.Xml.XPath.IXPathNavigable,System.Xml.XPath.XPathExpression,System.String[])">
            <summary>
            This is used to get the string result from evaluating an XPath expression against the given document
            and a context created from a set of key/value pairs.
            </summary>
            <param name="document">The document to use</param>
            <param name="expression">The XPath expression to evaluate</param>
            <param name="keyValuePairs">A set of key/value pairs to use when creating the context</param>
            <returns>The evaluated expression result</returns>
            <example>
            <code language="cs">
            string result = document.EvalXPathExpr("concat($key, '.htm')", "key", "filename");
            </code>
            </example>
            <exception cref="T:System.ArgumentException">This is thrown if the <paramref name="keyValuePairs"/>
            parameter contains an odd number of parameters.</exception>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponentUtilities.GetRelativePath(System.String,System.String)">
            <summary>
            This returns the path argument adjusted to be relative to the base path. Absolute path names will
            be returned unchanged.
            </summary>
            <param name="path">The path to adjust including the filename</param>
            <param name="basePath">The base path to use including the filename</param>
            <returns>The path argument as a path relative to the given base path</returns>
            <example>
            <code language="none" title=" ">
            path:     "xxx/aaa/target.html"
            basePath: "xxx/bbb/source.html"
            result:   "../aaa/target.html"
            </code>
            </example>
            <remarks>This assumes that the path separator is "/" and that both paths include a filename</remarks>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponentUtilities.IsLegalXmlText(System.String)">
            <summary>
            This is used to confirm that the specified text only contains legal XML characters
            </summary>
            <param name="text">The text to check</param>
            <returns>True if all characters are legal XML characters, false if not</returns>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.AppliedChangesEventArgs">
            <summary>
            This is used by components to indicate that they have finished applying their changes to the given topic
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.AppliedChangesEventArgs.GroupId">
            <summary>
            This read-only property returns the group ID of the component that applied the changes
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.AppliedChangesEventArgs.ComponentId">
            <summary>
            This read-only property returns the ID of the component that applied the changes
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.AppliedChangesEventArgs.Key">
            <summary>
            This read-only property returns the topic key
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.AppliedChangesEventArgs.Document">
            <summary>
            This read-only property returns the topic document that was modified
            </summary>
            <remarks>Event handlers can further modify the topic's XML as needed</remarks>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.AppliedChangesEventArgs.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="groupId">The group ID of the component</param>
            <param name="componentId">The component ID</param>
            <param name="key">The topic key</param>
            <param name="document">The topic document</param>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.ApplyingChangesEventArgs">
            <summary>
            This is used by components to indicate that they are about to  apply their changes to the given document
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.ApplyingChangesEventArgs.GroupId">
            <summary>
            This read-only property returns the group ID of the component that is about to apply the changes
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.ApplyingChangesEventArgs.ComponentId">
            <summary>
            This read-only property returns the ID of the component that is about to apply the changes
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.ApplyingChangesEventArgs.Key">
            <summary>
            This read-only property returns the topic key
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.ApplyingChangesEventArgs.Document">
            <summary>
            This read-only property returns the topic document that will be modified
            </summary>
            <remarks>Event handlers can modify the topic's XML as needed</remarks>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.ApplyingChangesEventArgs.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="groupId">The group ID of the component</param>
            <param name="componentId">The component ID</param>
            <param name="key">The topic key</param>
            <param name="document">The topic document</param>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore">
            <summary>
            This is the abstract base class for all build components
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore.BuildAssembler">
            <summary>
            This read-only property returns a reference to the build assembler instance using the component
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore.GroupId">
            <summary>
            This is used to set an optional group ID for use with component events
            </summary>
            <value>If not overridden, the default group ID is null (no group)</value>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore.#ctor(Sandcastle.Core.BuildAssembler.IBuildAssembler)">
            <summary>
            Constructor
            </summary>
            <param name="buildAssembler">A reference to the build assembler</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore.Finalize">
            <summary>
            This handles garbage collection to ensure proper disposal of the build component if not done
            explicitly with <see cref="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore.Dispose"/>.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore.Dispose">
            <summary>
            This implements the Dispose() interface to properly dispose of the build component.
            </summary>
            <overloads>There are two overloads for this method.</overloads>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore.Dispose(System.Boolean)">
            <summary>
            This can be overridden by derived classes to add their own disposal code if necessary.
            </summary>
            <param name="disposing">Pass true to dispose of the managed and unmanaged resources or false to just
            dispose of the unmanaged resources.</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore.Initialize(System.Xml.XPath.XPathNavigator)">
            <summary>
            This abstract method must be overridden to initialize the component
            </summary>
            <param name="configuration">The component configuration</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore.Apply(System.Xml.XmlDocument,System.String)">
            <summary>
            This abstract method must be overridden to apply the build component's changes to the specified
            document.
            </summary>
            <param name="document">The document that the build component can modify</param>
            <param name="key">The key that uniquely identifies the document</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore.OnComponentEvent(System.EventArgs)">
            <summary>
            This can be used to raise the <see cref="E:Sandcastle.Core.BuildAssembler.IBuildAssembler.ComponentEvent"/>
            event with the specified event arguments.
            </summary>
            <param name="e">The event arguments.  This can be <see cref="F:System.EventArgs.Empty"/> or a derived event
            arguments class containing information to pass to the event handlers.</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore.WriteMessage(Sandcastle.Core.MessageLevel,System.String,System.Object[])">
            <summary>
            This can be used to report a message
            </summary>
            <param name="level">The message level</param>
            <param name="message">The message to report</param>
            <param name="args">An optional list of arguments to format into the message</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore.WriteMessage(System.String,Sandcastle.Core.MessageLevel,System.String,System.Object[])">
            <summary>
            This can be used to report a message for a specific topic ID
            </summary>
            <param name="key">The topic key related to the message</param>
            <param name="level">The message level</param>
            <param name="message">The message to report</param>
            <param name="args">An optional list of arguments to format into the message</param>
            <remarks>This is useful for warning and error messages as the topic ID will be included even when
            the message level is set to warnings or higher.  In such cases, the informational messages containing
            the "building topic X" messages are suppressed.</remarks>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentExportAttribute">
            <summary>
            This is a custom version of the <see cref="T:System.ComponentModel.Composition.ExportAttribute"/> that contains metadata for the
            BuildAssembler build components.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentExportAttribute.Id">
            <summary>
            This read-only property is used to get the build component ID
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentExportAttribute.IsVisible">
            <summary>
            This is used to get or set whether or not the component is visible to configuration tools
            </summary>
            <remarks>Configuration tools can use this to exclude components that should not appear for the user
            to select.  It is false by default.</remarks>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentExportAttribute.Description">
            <summary>
            This is used to get or set a brief description of the build component
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentExportAttribute.Version">
            <summary>
            This is used to get or set the build component version number
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentExportAttribute.Copyright">
            <summary>
            This is used to get or set copyright information for the build component
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentExportAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">The required build component ID</param>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentFactory">
            <summary>
            This is an abstract base class that defines the factory method for build components as well as build
            tool interaction methods.
            </summary>
            <remarks>Build components are non-shared and instances are created as needed</remarks>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentFactory.BuildAssembler">
            <summary>
            This is used to import the build assembler instance that is passed to the build component when it
            is created.
            </summary>
            <value>This may be null when used in a configuration tool which only needs access to the
            configuration methods on the factory class.</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentFactory.Dependencies">
            <summary>
            This read-only property can be overridden to provide a list of build components on which this
            component depends.
            </summary>
            <value>If the indicated components do not exist in the project settings or in the configuration file
            already, the build tool can use this information to add them automatically with a default
            configuration.  It returns an empty list by default.</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentFactory.ReferenceBuildPlacement">
            <summary>
            This is used to get or set a placement action for reference content builds
            </summary>
            <value>The default is to not place the component.  Components that are exposed to build tools should
            set this to define a proper placement action.</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentFactory.ConceptualBuildPlacement">
            <summary>
            This is used to get or set a placement action for conceptual content builds
            </summary>
            <value>The default is to not place the component.  Components that are exposed to build tools should
            set this to define a proper placement action.</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentFactory.DefaultConfiguration">
            <summary>
            This read-only property can be overridden to define a default configuration for the build component
            </summary>
            <value>It returns an empty string by default</value>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentFactory.Create">
            <summary>
            This is implemented to provide a build component factory
            </summary>
            <returns>A new instance of a build component</returns>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.ComponentPlacement">
            <summary>
            This is used to define the placement of a build component within a BuildAssembler configuration file
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.ComponentPlacement.Placement">
            <summary>
            This read-only property returns the placement action value
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.ComponentPlacement.Id">
            <summary>
            This read-only property returns the ID of the component related to the <see cref="T:Sandcastle.Core.BuildAssembler.BuildComponent.PlacementAction"/>
            if applicable.
            </summary>
            <value>This only has meaning for the <c>Before</c>, <c>After</c>, and <c>Replace</c>
            <see cref="T:Sandcastle.Core.BuildAssembler.BuildComponent.PlacementAction"/>.</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.ComponentPlacement.Instance">
            <summary>
            This read-only property returns the instance of the component to replace, insert before, or insert
            after.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.ComponentPlacement.AdjustedInstance">
            <summary>
            This property is used to get or set the instance of the component to replace, insert before, or
            insert after adjusted for other components that have already been processed.
            </summary>
            <value>This is a property for use by designers and build tools</value>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.ComponentPlacement.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>The <see cref="P:Sandcastle.Core.BuildAssembler.BuildComponent.ComponentPlacement.Placement"/> is set to <c>None</c></remarks>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.ComponentPlacement.#ctor(Sandcastle.Core.BuildAssembler.BuildComponent.PlacementAction,System.String)">
            <summary>
            Constructor.  Indicate the placement action and an optional component ID related to it if needed.
            </summary>
            <param name="placement">The placement action to use</param>
            <param name="id">A build component ID for use with the <c>Before</c>, <c>After</c>, or
            <c>Replace</c> <see cref="P:Sandcastle.Core.BuildAssembler.BuildComponent.ComponentPlacement.Placement"/> action.</param>
            <exception cref="T:System.ArgumentException">This is thrown if <c>Before</c>, <c>After</c>, or <c>Replace</c>
            is specified without an ID or if one is specified with <c>None</c>, <c>Start</c>, or <c>End</c>.</exception>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.ComponentPlacement.#ctor(Sandcastle.Core.BuildAssembler.BuildComponent.PlacementAction,System.String,System.Int32)">
            <summary>
            Constructor.  Indicate the placement action, component ID, and instance to act on.
            </summary>
            <param name="placement">The placement action to use</param>
            <param name="id">A build component ID for use with the <c>Before</c>, <c>After</c>, or
            <c>Replace</c> <see cref="P:Sandcastle.Core.BuildAssembler.BuildComponent.ComponentPlacement.Placement"/> action.</param>
            <param name="instance">The instance to use with the placement option</param>
            <exception cref="T:System.ArgumentException">This is thrown if <c>Before</c>, <c>After</c>, or <c>Replace</c>
            is specified without an ID or if instance is less than one.</exception>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.CopyComponentCore">
            <summary>
            This abstract class is used to create copy components used in other build components such as
            <c>CopyFromIndexComponent</c>
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.CopyComponentCore.ParentBuildComponent">
            <summary>
            This read-only property returns a reference to the parent build component
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.CopyComponentCore.#ctor(Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore)">
            <summary>
            Constructor
            </summary>
            <param name="parent">The parent build component</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.CopyComponentCore.Initialize(System.Xml.XPath.XPathNavigator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This abstract method must be overridden to initialize the copy component
            </summary>
            <param name="configuration">The copy component configuration</param>
            <param name="data">A dictionary object with string as key and object as value.</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.CopyComponentCore.Apply(System.Xml.XmlDocument,System.String)">
            <summary>
            This abstract method must be overridden to apply the copy component's changes to the specified
            document.
            </summary>
            <param name="document">The document that the build component can modify</param>
            <param name="key">The key that uniquely identifies the document</param>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.CopyComponentExportAttribute">
            <summary>
            This is a custom version of the <see cref="T:System.ComponentModel.Composition.ExportAttribute"/> that contains metadata for the
            BuildAssembler copy components.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.CopyComponentExportAttribute.Id">
            <summary>
            This read-only property is used to get the copy component ID
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.CopyComponentExportAttribute.Description">
            <summary>
            This is used to get or set a brief description of the copy component
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.CopyComponentExportAttribute.Version">
            <summary>
            This is used to get or set the copy component version number
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.CopyComponentExportAttribute.Copyright">
            <summary>
            This is used to get or set copyright information for the copy component
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.CopyComponentExportAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">The required copy component ID</param>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.IBuildComponentMetadata">
            <summary>
            This class defines the metadata for a BuildAssembler build component
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.IBuildComponentMetadata.Id">
            <summary>
            This read-only property returns the ID for the build component
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.IBuildComponentMetadata.IsVisible">
            <summary>
            This read-only property returns true if the build component is visible to configuration tools
            </summary>
            <remarks>Configuration tools can use this to exclude components that should not appear for the user
            to select.</remarks>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.IBuildComponentMetadata.Description">
            <summary>
            This read-only property returns a brief description of the build component
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.IBuildComponentMetadata.Version">
            <summary>
            This read-only property returns the version of the build component
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.IBuildComponentMetadata.Copyright">
            <summary>
            This read-only property returns the copyright information for the build component
            </summary>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.ICopyComponentFactory">
            <summary>
            This interface defines the factory method for copy components
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.ICopyComponentFactory.Create(Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore)">
            <summary>
            This is implemented to provide a syntax generator factory
            </summary>
            <param name="parent">The parent build component</param>
            <returns>A new instance of a syntax generator</returns>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.ICopyComponentMetadata">
            <summary>
            This class defines the metadata for a BuildAssembler build component
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.ICopyComponentMetadata.Id">
            <summary>
            This read-only property returns the ID for the copy component
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.ICopyComponentMetadata.Description">
            <summary>
            This read-only property returns a brief description of the copy component
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.ICopyComponentMetadata.Version">
            <summary>
            This read-only property returns the version of the copy component
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.ICopyComponentMetadata.Copyright">
            <summary>
            This read-only property returns the copyright information for the copy component
            </summary>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.IMemberIdUrlResolver">
            <summary>
            This defines the interface used to resolve an API member ID to an online help website URL
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.IMemberIdUrlResolver.Locale">
            <summary>
            This is used to get or set the locale for the reference links if applicable to the resolver
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.IMemberIdUrlResolver.IsDisposed">
            <summary>
            This read-only property can be used to determine whether or not the resolver has been disposed
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.IMemberIdUrlResolver.IsDisabled">
            <summary>
            This read-only property indicates whether or not the resolver is disabled
            </summary>
            <value>If true, reference links cannot be looked up</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.IMemberIdUrlResolver.DisabledReason">
            <summary>
            This read-only property returns the reason the resolver is disabled if <see cref="P:Sandcastle.Core.BuildAssembler.BuildComponent.IMemberIdUrlResolver.IsDisabled"/>
            returns true.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.IMemberIdUrlResolver.CachedUrls">
            <summary>
            This read-only property returns the URL cache
            </summary>
            <remarks>The key is the member ID, the value is the member URL</remarks>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.BuildComponent.IMemberIdUrlResolver.CacheItemsAdded">
            <summary>
            This read-only property is used to return the number of items added to the cache during the latest
            run.
            </summary>
            <value>Returns a non-zero number if items were added or zero if no new items were added or errors
            occurred that invalidate the updates made.  This can be used to determine if the cache should be
            persisted in some fashion.</value>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.BuildComponent.IMemberIdUrlResolver.ResolveUrlForId(System.String)">
            <summary>
            This is used to get the help website URL for the given .NET Framework member ID
            </summary>
            <param name="id">The member ID to look up</param>
            <returns>The URL for the member ID or null if not found or an error occurred looking it up</returns>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.BuildComponent.PlacementAction">
            <summary>
            This enumeration defines the build component configuration file placement action values
            </summary>
        </member>
        <member name="F:Sandcastle.Core.BuildAssembler.BuildComponent.PlacementAction.None">
            <summary>The component is not used in this configuration</summary>
        </member>
        <member name="F:Sandcastle.Core.BuildAssembler.BuildComponent.PlacementAction.Start">
            <summary>Insert the component at the start of the configuration file</summary>
        </member>
        <member name="F:Sandcastle.Core.BuildAssembler.BuildComponent.PlacementAction.End">
            <summary>Insert the component at the end of the configuration file</summary>
        </member>
        <member name="F:Sandcastle.Core.BuildAssembler.BuildComponent.PlacementAction.Before">
            <summary>Place the component before the one indicated</summary>
        </member>
        <member name="F:Sandcastle.Core.BuildAssembler.BuildComponent.PlacementAction.After">
            <summary>Place the component after the one indicated</summary>
        </member>
        <member name="F:Sandcastle.Core.BuildAssembler.BuildComponent.PlacementAction.Replace">
            <summary>Replace the indicated component configuration with this one</summary>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.ConfigurationEditorExportAttribute">
            <summary>
            This is a custom version of the <see cref="T:System.ComponentModel.Composition.ExportAttribute"/> that contains metadata for the
            BuilderAssembler component configuration editors.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.ConfigurationEditorExportAttribute.Id">
            <summary>
            This read-only property is used to get the component ID
            </summary>
            <value>This must match the ID of the build component for which this will provide a configuration
            editor.</value>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.ConfigurationEditorExportAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">The required component ID</param>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.CustomContext">
            <summary>
            This represents a custom XSLT context used by BuildAssembler
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.CustomContext.#ctor">
            <summary>
            Constructor
            </summary>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.CustomContext.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This constructor takes a dictionary containing the namespaces (the key is the prefix, the value is
            the namespace URI).
            </summary>
            <param name="namespaces">A dictionary containing the namespaces to add to the context</param>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.CustomContext.Item(System.String)">
            <summary>
            Indexer
            </summary>
            <param name="variable">The variable value to get or set</param>
            <returns>The variable value as a string</returns>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.CustomContext.ClearVariable(System.String)">
            <summary>
            Clear the named variable
            </summary>
            <param name="name">The variable to clear</param>
            <returns>True if successful, false if not found</returns>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.CustomContext.ClearVariables">
            <summary>
            Clear all variables
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.CustomContext.ResolveVariable(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.CustomContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            This method is not implemented
            </summary>
            <param name="prefix">Not used</param>
            <param name="name">Not used</param>
            <param name="argumentTypes">Not used</param>
            <returns>Not implemented</returns>
            <exception cref="T:System.NotImplementedException">This method is not implemented</exception>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.CustomContext.CompareDocument(System.String,System.String)">
            <summary>
            This method is not used
            </summary>
            <param name="baseUri">Not used</param>
            <param name="nextBaseUri">Not used</param>
            <returns>This implementation always returns zero</returns>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.CustomContext.Whitespace">
            <inheritdoc />
            <value>This implementation always returns true</value>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.CustomContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <inheritdoc />
            <remarks>This implementation always returns true</remarks>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.CustomVariable">
            <summary>
            This represents a custom XSLT variable used by a BuildAssembler <see cref="T:Sandcastle.Core.BuildAssembler.CustomContext"/>
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.CustomVariable.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="value">The variable's value</param>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.CustomVariable.IsLocal">
            <inheritdoc />
            <value>This implementation always returns false</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.CustomVariable.IsParam">
            <inheritdoc />
            <value>This implementation always returns false</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.CustomVariable.VariableType">
            <inheritdoc />
            <value>This implementation always returns <see cref="F:System.Xml.XPath.XPathResultType.String"/></value>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.CustomVariable.Evaluate(System.Xml.Xsl.XsltContext)">
            <inheritdoc />
            <remarks>This always returns the value of the variable assigned in the constructor</remarks>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.IBuildAssembler">
            <summary>
            This interface defines the common Build Assembler tool properties, events, and methods used to generate
            help topics.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.IBuildAssembler.VerbosityLevel">
            <summary>
            This read-only property returns the verbosity level for the message handlers
            </summary>
            <value>The value can be <c>Info</c>, <c>Warn</c>, or <c>Error</c>.  The default level is
            <see cref="F:Sandcastle.Core.MessageLevel.Info"/> so that all messages are displayed.  Setting it to a higher
            level will suppress messages below the given level.</value>
            <remarks>It is up to the message handler to make use of this property</remarks>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.IBuildAssembler.TopicTransformation">
            <summary>
            This read-only property returns the topic transformation to use for the presentation style
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.IBuildAssembler.BuildComponents">
            <summary>
            This read-only property returns the current list of build components
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.IBuildAssembler.Data">
            <summary>
            This read-only property returns a dictionary that can be used to store information shared between
            build components.
            </summary>
        </member>
        <member name="E:Sandcastle.Core.BuildAssembler.IBuildAssembler.ComponentEvent">
            <summary>
            This event is raised when a component wants to signal that something of interest has happened
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.IBuildAssembler.OnComponentEvent(System.Object,System.EventArgs)">
            <summary>
            This is used to raise the <see cref="E:Sandcastle.Core.BuildAssembler.IBuildAssembler.ComponentEvent" />
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.IBuildAssembler.AddComponents(System.Xml.XPath.XPathNavigator)">
            <summary>
            Add a set of components based on the given configuration
            </summary>
            <param name="configuration">The configuration containing the component definitions</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.IBuildAssembler.ClearComponents">
            <summary>
            Dispose of all components and clear them from the collection
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.IBuildAssembler.LoadComponents(System.Xml.XPath.XPathNavigator)">
            <summary>
            This is used to load a set of components in a configuration and return them as an enumerable list
            </summary>
            <param name="configuration">The configuration node from which to get the components</param>
            <returns>An enumerable list of components created based on the configuration information</returns>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.IBuildAssembler.LoadComponent(System.Xml.XPath.XPathNavigator)">
            <summary>
            This is used to create a component based on the given configuration
            </summary>
            <param name="configuration">The component configuration</param>
            <returns>A component created using the given definition</returns>
            <exception cref="T:System.ArgumentNullException">This is thrown if <paramref name="configuration"/> is null</exception>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.IBuildAssembler.WriteMessage(System.String,Sandcastle.Core.MessageLevel,System.String,System.String)">
            <summary>
            Write a component message to the message log
            </summary>
            <param name="componentName">The name of the component writing the message</param>
            <param name="level">The message level</param>
            <param name="key">An optional topic key related to the message or null if there isn't one</param>
            <param name="message">The message to write to the console</param>
            <remarks>If the message level is below the current verbosity level setting, the message is ignored</remarks>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.IConfigurationEditor">
            <summary>
            This class defines the interface used to edit a component configuration
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.IConfigurationEditor.EditConfiguration(System.Xml.Linq.XElement,System.ComponentModel.Composition.Hosting.CompositionContainer)">
            <summary>
            This method is used to edit a build component configuration
            </summary>
            <param name="configuration">An XML element containing the current configuration settings</param>
            <param name="container">A composition container that holds all of the exported components found
            by the build tool.  This can be used to locate and work with other components if necessary.</param>
            <returns>True if the configuration element was updated, false if not</returns>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.IConfigurationEditorMetadata">
            <summary>
            This class defines the metadata for a build component configuration editor
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.IConfigurationEditorMetadata.Id">
            <summary>
            This read-only property returns the ID of the configurable build component
            </summary>
            <value>This must match the ID of the build component for which this will provide a configuration editor</value>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorFactory">
            <summary>
            This interface defines the factory method for syntax generators
            </summary>
            <remarks>Although not required, syntax generators are non-shared and instances are created as needed.</remarks>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorFactory.ResourceItemFileLocation">
            <summary>
            This read-only property is implemented to return the default and localized resource item file
            location.
            </summary>
            <remarks><para>If it returns null or an empty string, it is assumed the syntax generator has no
            resource item files.  Otherwise, this will return the folder containing the default and localized
            resource item files for things such as the title to use for syntax sections and code examples,
            unsupported language feature messages, etc.</para>
            
            <para>The resource item files are like those in the presentation styles.  The root folder contains
            the default (English) resource item file.  Subfolders, if any, named after each supported language
            contain the localized version of the file.  In all cases, the file is named using the language ID
            plus a ".xml" extension.</para></remarks>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorFactory.Create">
            <summary>
            This is implemented to provide a syntax generator factory
            </summary>
            <returns>A new instance of a syntax generator</returns>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata">
            <summary>
            This class defines the metadata for a BuildAssembler syntax generator component
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata.Id">
            <summary>
            This read-only property returns the ID for the syntax generator (typically the language name)
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata.LanguageElementName">
            <summary>
            This read-only property is used to get the value used as the XML element name and in resource item
            IDs used during XSL transformation such as for label text.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata.KeywordStyleParameter">
            <summary>
            This read-only property is used to get the keyword style parameter value used by the client side
            script in the topics for language-specific keyword text.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata.IsConfigurable">
            <summary>
            This read-only property returns true if the syntax generator is configurable or false if it is not
            </summary>
            <value>Configuration is handled by the <c>SyntaxComponent</c> build component.</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata.Description">
            <summary>
            This read-only property returns a brief description of the syntax generator
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata.Version">
            <summary>
            This read-only property returns the version of the syntax generator
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata.Copyright">
            <summary>
            This read-only property returns the copyright information for the syntax generator
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata.SortOrder">
            <summary>
            This read-only property returns the value that defines the order in which the syntax generators are
            added the to the configuration file.
            </summary>
            <value>The sort order determines the order of the syntax sections in each topic</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata.AlternateIds">
            <summary>
            This read-only property returns a comma-separated list of alternate language IDs that can be used
            by designers to translate an alternate ID to the primary <see cref="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata.Id"/>
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata.DefaultConfiguration">
            <summary>
            This read-only property returns a string containing an XML fragment that defines the default
            syntax generator configuration if supported.
            </summary>
            <value>Designers can use this value as a default if they provide configuration editing support</value>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter">
            <summary>
            This is used to write out syntax for managed code
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter.Position">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter.#ctor(System.Xml.XPath.XPathNavigator)">
            <summary>
            Constructor
            </summary>
            <param name="location">The location in which to write the output</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter.WriteStartBlock(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter.WriteStartSubBlock(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter.WriteEndBlock">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter.WriteEndSubBlock">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter.WriteLine">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter.WriteString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter.WriteStringWithStyle(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter.WriteReferenceLink(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter.WriteReferenceLink(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ManagedSyntaxWriter.WriteMessage(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorCore">
            <summary>
            This is the abstract base class for syntax generators
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorCore.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorCore.Initialize(System.Xml.XPath.XPathNavigator)">
            <summary>
            Initialize the syntax generator
            </summary>
            <param name="configuration">The syntax generator configuration</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorCore.WriteSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            This is implemented to write the syntax
            </summary>
            <param name="reflection">The reflection data used to generate the syntax</param>
            <param name="writer">The writer to which the syntax information is written</param>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute">
            <summary>
            This is a custom version of the <see cref="T:System.ComponentModel.Composition.ExportAttribute"/> that contains metadata for the
            BuildAssembler syntax generators.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute.Id">
            <summary>
            This read-only property is used to get the syntax generator ID (typically the language name)
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute.LanguageElementName">
            <summary>
            This read-only property is used to get the value used as the XML element name and in resource item
            IDs used during XSL transformation such as for label text.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute.KeywordStyleParameter">
            <summary>
            This read-only property is used to get the keyword style parameter value used by the client side
            script in the topics for language specific keyword/separator text.
            </summary>
            <value>This will be one of the following: <c>cs</c> (C# or equivalent), <c>vb</c> (VB.NET
            or equivalent), <c>cpp</c> (C++ or equivalent), <c>fs</c> (F# or equivalent), or a value unique to
            the language.</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute.IsConfigurable">
            <summary>
            This is used to get or set whether or not the syntax generator is configurable
            </summary>
            <value>Configuration is handled by the <c>SyntaxComponent</c> build component.</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute.Description">
            <summary>
            This is used to get or set a brief description of the syntax generator
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute.Version">
            <summary>
            This is used to get or set the syntax generator version number
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute.Copyright">
            <summary>
            This is used to get or set copyright information for the syntax generator
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute.SortOrder">
            <summary>
            This is used to get or set the value that defines the order in which the syntax generators are added
            the to the configuration file.
            </summary>
            <value>The sort order determines the order of the syntax sections in each topic</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute.AlternateIds">
            <summary>
            This is used to get or set a comma-separated list of alternate language IDs that can be used by
            designers to translate an alternate ID to the primary <see cref="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute.Id"/>
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute.DefaultConfiguration">
            <summary>
            This is used to get or set a string containing an XML fragment that defines the default syntax
            generator configuration if supported.
            </summary>
            <value>Designers can use this value as a default if they provide configuration editing support</value>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorExportAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">The required plug-in ID</param>
            <param name="languageElementName">The language element name and resource item ID</param>
            <param name="keywordStyleParameter">The keyword style parameter value for client side script</param>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate">
            <summary>
            This abstract class is used as the base class for syntax generators
            </summary>
        </member>
        <member name="F:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.MaxPosition">
            <summary>
            The maximum line width for the generated syntax
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.Language">
            <summary>
            This is used to get or set the language name
            </summary>
            <value>This is used as the code language name added as an attribute to the <c>div</c>element written
            to the topics.  The presentation style XSL transformations will also use it to name the
            language-specific resource items.</value>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.StyleId">
            <summary>
            This is used to get or set the style ID
            </summary>
            <value>This is used as the code style ID added as an attribute to the <c>div</c>element written
            to the topics.  The presentation style XSL transformations will use it to group common language
            elements such as language-specific text and code snippets so that they can be shown and hidden
            together.</value>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteNamespaceSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write namespace syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteClassSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write class syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteStructureSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write structure syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteInterfaceSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write interface syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteDelegateSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write delegate syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteEnumerationSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write enumeration syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteConstructorSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write constructor syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WritePropertySyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write property syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteFieldSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write field syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteEventSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write event syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.Initialize(System.Xml.XPath.XPathNavigator)">
            <summary>
            Initialize the syntax generator
            </summary>
            <param name="configuration">The syntax generator configuration</param>
            <remarks>The base implementation just validates that a <see cref="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.Language"/> and
            <see cref="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.StyleId"/> have been defined.</remarks>
            <exception cref="T:System.InvalidOperationException">This is thrown if a <see cref="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.Language"/> or
            <see cref="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.StyleId"/> has not been set.</exception>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            This is the main syntax writing method
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteTypeSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write type syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteMemberSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write member syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteMethodSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write method syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteNormalMethodSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write normal method syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteOperatorSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write operator syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteCastSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write cast syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteAttachedPropertySyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write attached property syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteAttachedEventSyntax(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write attached event syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.IsUnsupportedVarargs(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write unsupported variable arguments syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
            <returns>True if unsupported, false if it is supported</returns>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.IsUnsupportedUnsafe(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write unsupported unsafe code syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
            <returns>True if unsupported, false if it is supported</returns>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.IsUnsupportedGeneric(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write unsupported generic types syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
            <returns>True if unsupported, false if it is supported</returns>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.IsUnsupportedExplicit(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write unsupported explicit implementation syntax
            </summary>
            <param name="reflection">The reflection data used to produce the syntax</param>
            <param name="writer">The writer to which the syntax is written</param>
            <returns>True if unsupported, false if it is supported</returns>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteWithLineBreakIfNeeded(Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter,System.String,System.String)">
            <summary>
            This is used to write a string followed by an optional line break if needed (the writer position is
            past the maximum position afterwards).
            </summary>
            <param name="writer">The syntax writer to use</param>
            <param name="text">An optional text string to write before the new line</param>
            <param name="indent">An optional indent to write after the line break</param>
            <returns>True if a new line was written, false if not</returns>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteTypeReference(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write out a type reference
            </summary>
            <param name="reference">The type reference to output</param>
            <param name="writer">The syntax writer to which the type reference is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteNormalTypeReference(System.String,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write out a normal type reference
            </summary>
            <param name="api">The type reference to output</param>
            <param name="writer">The syntax writer to which the type reference is written</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxGeneratorTemplate.WriteConstantValue(System.Xml.XPath.XPathNavigator,Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter)">
            <summary>
            Write out a constant's value
            </summary>
            <param name="parent">The parent node</param>
            <param name="writer">The syntax writer</param>
        </member>
        <member name="T:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter">
            <summary>
            This is used as the abstract base class for syntax writers
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.Position">
            <summary>
            The current position of the writer
            </summary>
        </member>
        <member name="P:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.RenderReferenceLinks">
            <summary>
            This is used to indicate whether or not the syntax writer should render reference links as actual
            links.
            </summary>
            <value>The default is false to render reference link elements as identifiers instead.  If set to
            true, it will render them as actual clickable links if the target can be resolved.</value>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteStartBlock(System.String,System.String)">
            <summary>
            Write a start block
            </summary>
            <param name="codeLanguage">The code language of the block</param>
            <param name="styleId">The style ID of the block</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteStartSubBlock(System.String)">
            <summary>
            Write a start sub-block
            </summary>
            <param name="classId">The style class ID of the sub-block</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteEndBlock">
            <summary>
            Write an end block
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteEndSubBlock">
            <summary>
            Write an end sub-block
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteString(System.String)">
            <summary>
            Write a string value
            </summary>
            <param name="text">The string to write</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteStringWithStyle(System.String,System.String)">
            <summary>
            Write a string value with a style
            </summary>
            <param name="text">The string to write</param>
            <param name="style">The style class ID to use</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteReferenceLink(System.String)">
            <summary>
            Write a reference link
            </summary>
            <param name="reference">The reference link ID</param>
            <overloads>There are two overloads for this method</overloads>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteReferenceLink(System.String,System.String)">
            <summary>
            Write a reference link with inner text
            </summary>
            <param name="reference">The reference link ID</param>
            <param name="text">The inner text of the link</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteMessage(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Write a message include item
            </summary>
            <param name="message">The message include item ID</param>
            <param name="parameters">Optional parameters to add to the message include item</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteLine">
            <summary>
            Write out a blank line
            </summary>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteKeyword(System.String)">
            <summary>
            Write out a keyword
            </summary>
            <param name="keyword">The keyword to write</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteParameter(System.String)">
            <summary>
            Write out a parameter
            </summary>
            <param name="parameter">The parameter to write</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteIdentifier(System.String)">
            <summary>
            Write out an identifier
            </summary>
            <param name="identifier">The identifier to write</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteLiteral(System.String)">
            <summary>
            Write out a literal
            </summary>
            <param name="literal">The literal to write</param>
        </member>
        <member name="M:Sandcastle.Core.BuildAssembler.SyntaxGenerator.SyntaxWriter.WriteMessage(System.String)">
            <summary>
            Write out a message
            </summary>
            <param name="message">The message include item ID to write</param>
        </member>
        <member name="T:Sandcastle.Core.CommandLine.BaseOption">
            <summary>
            This abstract base class represents a command line option
            </summary>
        </member>
        <member name="P:Sandcastle.Core.CommandLine.BaseOption.Name">
            <summary>
            This read-only property returns the option name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.CommandLine.BaseOption.Description">
            <summary>
            This read-only property returns the option description
            </summary>
        </member>
        <member name="P:Sandcastle.Core.CommandLine.BaseOption.RequiredMessage">
            <summary>
            This is used to get or set a message to display if the option is missing
            </summary>
            <remarks>The default is null and the parameter is optional.  If set to a non-null, non-empty string
            value, the parameter is required.</remarks>
        </member>
        <member name="P:Sandcastle.Core.CommandLine.BaseOption.Value">
            <summary>
            This property is used to get or set the option value
            </summary>
            <remarks>As written, the value can only be set when initially parsed</remarks>
            <exception cref="T:System.InvalidOperationException">This is thrown if an attempt is made to retrieve the
            value before it has been set or if an attempt is made to set the value twice.</exception>
        </member>
        <member name="P:Sandcastle.Core.CommandLine.BaseOption.IsPresent">
            <summary>
            This read-only property is used to determine whether or not the option value was present on the
            command line.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.BaseOption.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The option name</param>
            <param name="description">The option description</param>
            <exception cref="T:System.ArgumentException">This is thrown if the <paramref name="name"/> parameter is null
            or empty or contains non-alphabetic characters.</exception>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.BaseOption.ParseArgument(System.String)">
            <summary>
            This method is overridden to parse the option arguments, if any
            </summary>
            <param name="args">The arguments to parse</param>
            <returns>A <see cref="T:Sandcastle.Core.CommandLine.ParseResult"/> value to indicate the success or failure of the operation</returns>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.BaseOption.WriteTemplate(System.IO.TextWriter)">
            <summary>
            This method is overridden to show the command line syntax for the option
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to which the syntax string is written</param>
        </member>
        <member name="T:Sandcastle.Core.CommandLine.BooleanOption">
            <summary>
            This defines a Boolean option
            </summary>
            <remarks>A Boolean option is one that has a name followed by a '+' for true or a '-' for false</remarks>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.BooleanOption.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The Boolean option name</param>
            <param name="description">The Boolean option description</param>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.BooleanOption.ParseArgument(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.CommandLine.BooleanOption.WriteTemplate(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.CommandLine.ListOption">
            <summary>
            This defines a list option
            </summary>
            <remarks>A a list option is like a <see cref="T:Sandcastle.Core.CommandLine.StringOption"/> but the value is a comma-separated
            list of one or more values.</remarks>
        </member>
        <member name="P:Sandcastle.Core.CommandLine.ListOption.Value">
            <summary>
            This is overridden to return the value as a string array
            </summary>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.ListOption.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The list option name</param>
            <param name="description">The list option description</param>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.ListOption.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The list option name</param>
            <param name="description">The list option description</param>
            <param name="template">A template to use when showing the command line syntax</param>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.ListOption.ParseArgument(System.String)">
            <inheritdoc />
            <remarks>If the option appears multiple times, the values are combined into a single list</remarks>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.ListOption.WriteTemplate(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.CommandLine.OptionCollection">
            <summary>
            This collection is used to hold a set of command line option definitions
            </summary>
        </member>
        <member name="P:Sandcastle.Core.CommandLine.OptionCollection.Item(System.String)">
            <summary>
            This read-only property can be used to retrieve an option by name
            </summary>
            <param name="name">The name of the option to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.OptionCollection.InsertItem(System.Int32,Sandcastle.Core.CommandLine.BaseOption)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.CommandLine.OptionCollection.ClearItems">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.CommandLine.OptionCollection.RemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.CommandLine.OptionCollection.SetItem(System.Int32,Sandcastle.Core.CommandLine.BaseOption)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.CommandLine.OptionCollection.ParseArguments(System.String[])">
            <summary>
            Parse an array of command line option strings into command line option instances
            </summary>
            <param name="args">The array of options to parse</param>
            <returns>The results of parsing the command line option strings</returns>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.OptionCollection.WriteOptionSummary(System.IO.TextWriter)">
            <summary>
            This is used to write out a summary of the options
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to which the summary is written</param>
            <exception cref="T:System.ArgumentNullException">This is thrown if the <paramref name="writer"/> parameter
            is null.</exception>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.OptionCollection.ParseArguments(System.String[],Sandcastle.Core.CommandLine.ParseArgumentsResult)">
            <summary>
            This is used to parse the command line options and return the results
            </summary>
            <param name="args">The array of option strings to parse</param>
            <param name="results">The results of the parsing operation</param>
        </member>
        <member name="T:Sandcastle.Core.CommandLine.ParseArgumentsResult">
            <summary>
            This is used to hold the results of parsing a set of command line option strings
            </summary>
        </member>
        <member name="P:Sandcastle.Core.CommandLine.ParseArgumentsResult.Options">
            <summary>
            This read-only property is used to get the option collection related to the results
            </summary>
        </member>
        <member name="P:Sandcastle.Core.CommandLine.ParseArgumentsResult.Success">
            <summary>
            This read-only property is used to see if the options were parsed successfully
            </summary>
            <value>Returns true if successful, false if not</value>
        </member>
        <member name="P:Sandcastle.Core.CommandLine.ParseArgumentsResult.UnusedArguments">
            <summary>
            This read-only property returns a collection of the unused arguments
            </summary>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.ParseArgumentsResult.#ctor(Sandcastle.Core.CommandLine.OptionCollection)">
            <summary>
            Internal constructor
            </summary>
            <param name="options">The option collection related to the results</param>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.ParseArgumentsResult.AddError(System.String,Sandcastle.Core.CommandLine.ParseResult)">
            <summary>
            This is used to add a parsing error
            </summary>
            <param name="optionName">The option name</param>
            <param name="error">The error result</param>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.ParseArgumentsResult.AddNonOption(System.String)">
            <summary>
            This is used to add a non-option
            </summary>
            <param name="value">The non-option value</param>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.ParseArgumentsResult.WriteParseErrors(System.IO.TextWriter)">
            <summary>
            This is used to write out a list of all parsing errors
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to which the summary is written</param>
        </member>
        <member name="T:Sandcastle.Core.CommandLine.ParseResult">
            <summary>
            This enumerated type defines the command line option parsing results
            </summary>
        </member>
        <member name="F:Sandcastle.Core.CommandLine.ParseResult.Success">
            <summary>Success</summary>
        </member>
        <member name="F:Sandcastle.Core.CommandLine.ParseResult.ArgumentNotAllowed">
            <summary>Argument not allowed</summary>
        </member>
        <member name="F:Sandcastle.Core.CommandLine.ParseResult.MalformedArgument">
            <summary>Malformed argument</summary>
        </member>
        <member name="F:Sandcastle.Core.CommandLine.ParseResult.MissingOption">
            <summary>Missing option</summary>
        </member>
        <member name="F:Sandcastle.Core.CommandLine.ParseResult.UnrecognizedOption">
            <summary>Unrecognized option</summary>
        </member>
        <member name="F:Sandcastle.Core.CommandLine.ParseResult.MultipleOccurence">
            <summary>A single-use option appeared multiple times</summary>
        </member>
        <member name="T:Sandcastle.Core.CommandLine.StringOption">
            <summary>
            This defines a string option
            </summary>
            <remarks>A string option is one that has a name/value pair separated by a colon</remarks>
        </member>
        <member name="P:Sandcastle.Core.CommandLine.StringOption.Template">
            <summary>
            This is used to specify the template used when showing the command line syntax
            </summary>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.StringOption.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The string option name</param>
            <param name="description">The string option description</param>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.StringOption.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The string option name</param>
            <param name="description">The string option description</param>
            <param name="template">A template to use when showing the command line syntax</param>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.StringOption.ParseArgument(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.CommandLine.StringOption.WriteTemplate(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.CommandLine.SwitchOption">
            <summary>
            This defines a switch option
            </summary>
            <remarks>A switch option is one that is only represented by its name</remarks>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.SwitchOption.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The switch option name</param>
            <param name="description">The switch option description</param>
        </member>
        <member name="M:Sandcastle.Core.CommandLine.SwitchOption.ParseArgument(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.CommandLine.SwitchOption.WriteTemplate(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.ComponentAssemblyResolver">
            <summary>
            This is used to resolve assembly dependencies when loading component assemblies with MEF
            </summary>
        </member>
        <member name="M:Sandcastle.Core.ComponentAssemblyResolver.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Sandcastle.Core.ComponentAssemblyResolver.Finalize">
            <summary>
            This handles garbage collection to ensure proper disposal of the resolver if not done explicitly
            with <see cref="M:Sandcastle.Core.ComponentAssemblyResolver.Dispose"/>.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.ComponentAssemblyResolver.Dispose">
            <summary>
            This implements the Dispose() interface to properly dispose of the resolver
            </summary>
        </member>
        <member name="M:Sandcastle.Core.ComponentAssemblyResolver.AddFolder(System.String)">
            <summary>
            Add a folder to check for dependencies
            </summary>
            <param name="folder">The folder to check</param>
        </member>
        <member name="M:Sandcastle.Core.ComponentAssemblyResolver.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            This is handled to resolve dependent assemblies and load them when necessary
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="args">The event arguments</param>
            <returns>The loaded assembly or null if not found</returns>
        </member>
        <member name="T:Sandcastle.Core.ComponentUtilities">
            <summary>
            This class contains properties and methods used to locate and work with build components, plug-ins,
            syntax generators, and presentation styles.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.ComponentUtilities.RootFolder">
            <summary>
            This read-only property returns the path to the Sandcastle Help File Builder root folder
            </summary>
        </member>
        <member name="P:Sandcastle.Core.ComponentUtilities.ToolsFolder">
            <summary>
            This read-only property returns the path to the Sandcastle Help File Builder tools folder
            </summary>
        </member>
        <member name="P:Sandcastle.Core.ComponentUtilities.CoreComponentsFolder">
             <summary>
             This read-only property returns the core build components folder
             </summary>
            <remarks>These are the common components distributed with the Help File Builder</remarks>
        </member>
        <member name="P:Sandcastle.Core.ComponentUtilities.ThirdPartyComponentsFolder">
             <summary>
             This read-only property returns the common application data build components folder
             </summary>
            <remarks>Third party components should be located in the <strong>EWSoftware\Sandcastle Help File
             Builder\Components and Plug-Ins</strong> folder or a subfolder beneath it in the common application
             data folder.</remarks>
        </member>
        <member name="P:Sandcastle.Core.ComponentUtilities.CoreReflectionDataFolder">
             <summary>
             This read-only property returns the core reflection data file folder
             </summary>
            <remarks>These are the common reflection data files distributed with the Help File Builder</remarks>
        </member>
        <member name="P:Sandcastle.Core.ComponentUtilities.DefaultSyntaxFilter">
            <summary>
            This read-only property returns the default syntax filter setting
            </summary>
            <value>This returns "Standard" to add the standard C#, VB.NET and C++ syntax filter to each API
            topic.</value>
        </member>
        <member name="P:Sandcastle.Core.ComponentUtilities.SupportedLanguages">
            <summary>
            This read-only property returns a list of languages supported by the help file builder presentation
            styles.
            </summary>
            <value>The available language resources are determined by seeing what stop word list translations are
            available.</value>
        </member>
        <member name="M:Sandcastle.Core.ComponentUtilities.AssemblyFolder(System.Reflection.Assembly)">
            <summary>
            This is used to get the physical location of the specified assembly
            </summary>
            <param name="assembly">The assembly for which to get the physical location (the currently executing
            (calling) assembly if null).</param>
            <returns>This returns the actual location of the assembly, where it was found versus where it is
            executing from, which may be different if shadow copied.  This is required in order to find
            supporting files which will not be present in the shadow copied location.</returns>
        </member>
        <member name="M:Sandcastle.Core.ComponentUtilities.SetPaths">
            <summary>
            Set the paths used to find component configuration files and assemblies
            </summary>
        </member>
        <member name="M:Sandcastle.Core.ComponentUtilities.CreateComponentContainer(System.Collections.Generic.IEnumerable{System.String},Sandcastle.Core.ComponentAssemblyResolver,System.Threading.CancellationToken)">
            <summary>
            This is used to return a composition container filled with the available build components (SHFB
            plug-ins, presentation styles, BuildAssembler components, and syntax generators).
            </summary>
            <param name="folders">An enumerable list of additional folders to search recursively for components.</param>
            <param name="resolver">A component assembly resolver to use or null to use a temporary one</param>
            <param name="cancellationToken">An optional cancellation token or null if not supported by the caller.</param>
            <returns>The a composition container that contains all of the available components</returns>
            <remarks>The following folders are searched in the following order.  If the given folder has not been
            specified or does not exist, it is ignored.
            
            <list type="number">
                <item>The enumerable list of additional folders - This is typically the current project's
            NuGet packages (package tool paths from the <c>SHFBComponentPath</c> item in their properties file),
            the project's <c>ComponentPath</c> folder, and the current project's folder.  This allows for
            project-specific build components.  Paths are searched in the order given above if specified.</item>
                <item>Common application data folder - The help file builder's common application data folder
            where third-party build components are typically installed.</item>
                <item><c>SHFBROOT</c> core components folder - The core Sandcastle Help File Builder components
            folder and its subfolders.  This allows for XCOPY deployments that keep everything together.</item>
            </list>
            
            All folders and their subfolders are search recursively for assemblies (*.dll).  There may be
            duplicate component IDs across the assemblies found.  Only the first component for a unique
            ID will be used.  As such, assemblies in a folder with a higher search precedence can override
            copies in folders lower in the search order.</remarks>
        </member>
        <member name="M:Sandcastle.Core.ComponentUtilities.AddAssemblyCatalogs(System.ComponentModel.Composition.Hosting.AggregateCatalog,System.String,System.Collections.Generic.HashSet{System.String},System.Boolean,Sandcastle.Core.ComponentAssemblyResolver,System.Threading.CancellationToken)">
            <summary>
            This adds assembly catalogs to the given aggregate catalog for the given folder and all of its
            subfolders recursively.
            </summary>
            <param name="catalog">The aggregate catalog to which the assembly catalogs are added.</param>
            <param name="folder">The root folder to search.  It and all subfolders recursively will be searched
            for assemblies to add to the aggregate catalog.</param>
            <param name="searchedFolders">A hash set of folders that have already been searched and added.</param>
            <param name="includeSubfolders">True to search subfolders recursively, false to only search the given
            folder.</param>
            <param name="resolver">A component assembly resolver for finding dependency assemblies</param>
            <param name="cancellationToken">An optional cancellation token or null if not supported by the caller.</param>
            <remarks>It is done this way to prevent a single assembly that would normally be discovered via a
            directory catalog from preventing all assemblies from loading if it cannot be examined when the parts
            are composed (i.e. trying to load a Windows Store assembly on Windows 7).</remarks>
        </member>
        <member name="M:Sandcastle.Core.ComponentUtilities.ToRecognizedSyntaxFilterIds(System.Collections.Generic.IEnumerable{Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata},System.String)">
            <summary>
            This is used to convert the given set of comma-separated syntax filter IDs to a set of recognized
            filter IDs.
            </summary>
            <param name="allFilters">The list of all available syntax filter generators</param>
            <param name="filterIds">A comma-separated list of syntax filter IDs to convert</param>
            <returns>The validated and recognized set of syntax filter IDs.  If possible, the value is condensed
            to one of a set of combination values such as None, All, AllButUsage, or Standard.</returns>
        </member>
        <member name="M:Sandcastle.Core.ComponentUtilities.SyntaxFiltersFrom(System.Collections.Generic.IEnumerable{Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata},System.String)">
            <summary>
            This is used to return a collection of syntax filters based on the comma-separated list of IDs passed
            to the method.
            </summary>
            <param name="allFilters">The list of all available syntax filter generators</param>
            <param name="filterIds">A comma-separated list of syntax filter ID values.</param>
            <returns>An enumerable list of <see cref="T:Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata" /> representing the syntax
            filters found.</returns>
            <remarks>The following special IDs are also recognized: None = No filters, All = all filters,
            AllButUsage = All but syntax filters with "Usage" in their ID (i.e. VisualBasicUsage), Standard = C#,
            VB.NET, and C++ only.</remarks>
        </member>
        <member name="M:Sandcastle.Core.ComponentUtilities.SyntaxFilterGeneratorsFrom(System.Collections.Generic.IEnumerable{Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata},System.String)">
            <summary>
            This returns the syntax generator XML elements to insert into a BuildAssembler configuration file for
            the comma-separated list of syntax filter IDs.
            </summary>
            <param name="allFilters">The list of all available syntax filter generators</param>
            <param name="filterIds">A comma-separated list of syntax filter ID values.</param>
            <returns>A string containing the generator XML elements for the specified syntax filter IDs.</returns>
        </member>
        <member name="M:Sandcastle.Core.ComponentUtilities.SyntaxFilterLanguagesFrom(System.Collections.Generic.IEnumerable{Sandcastle.Core.BuildAssembler.SyntaxGenerator.ISyntaxGeneratorMetadata},System.String)">
            <summary>
            This returns the language filter items to used in the presentation style transformation
            </summary>
            <param name="allFilters">The list of all available syntax filter generators</param>
            <param name="filterIds">A comma-separated list of syntax filter ID values.</param>
            <returns>An enumerable list of the language filter items to use</returns>
        </member>
        <member name="M:Sandcastle.Core.ComponentUtilities.SyntaxGeneratorResourceItemFiles(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Globalization.CultureInfo)">
            <summary>
            This returns an enumerable list of resource item files for all defined syntax filters
            </summary>
            <param name="componentContainer">The component container from which to get the available syntax
            filter generators.</param>
            <param name="language">The language used to find localized versions if they exist</param>
            <returns>An enumerable list of syntax filter generator resource item files.  If localized versions in
            the specified language do not exit, the default resource item files (typically English US) will be
            returned.</returns>
        </member>
        <member name="M:Sandcastle.Core.ComponentUtilities.XmlStreamAxis(System.String,System.String)">
            <summary>
            This provides a fast and efficient way of querying large XML files for a specific element type
            </summary>
            <param name="xmlFile">The XML file to search</param>
            <param name="elementName">The element name for which to search</param>
            <returns>An enumerable list of <see cref="T:System.Xml.Linq.XElement"/> instances for each of the found nodes</returns>
            <remarks>This version only looks for a single element type which cannot contain nested instances of
            the given element.</remarks>
            <overloads>
            <summary>There are two overloads for this method</summary>
            <remarks>Using these methods to search for specific elements avoids having to load the entire file
            which can be quite costly in terms of memory when it is extremely large.  It is typically faster as
            well since it doesn't have to load and parse the whole file before starting the search.</remarks>
            </overloads>
        </member>
        <member name="M:Sandcastle.Core.ComponentUtilities.XmlStreamAxis(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This provides a fast and efficient way of querying large XML files for specific element types which
            themselves may contain instances of the given elements.
            </summary>
            <param name="xmlFile">The XML file to search</param>
            <param name="elementNames">An enumerable list of element names for which to search</param>
            <returns>An enumerable list of <see cref="T:System.Xml.Linq.XElement"/> instances for each of the found nodes including
            any nested instances of elements with those names.</returns>
            <remarks>If the element contains nested instances of the elements, the parent is returned first
            followed by the nested elements (one level deep only).</remarks>
        </member>
        <member name="M:Sandcastle.Core.ComponentUtilities.GetHashCodeDeterministic(System.String)">
            <summary>
            This returns a deterministic hash code that is the same in the full .NET Framework and in .NET Core
            in every session given the same string to hash.
            </summary>
            <param name="hashString">The string to hash</param>
            <returns>The deterministic hash code</returns>
            <remarks>The hashing algorithm differs in .NET Core and returns different hash codes for each session.
            This was done for security to prevent DoS attacks. For the help file builder, we're just using it to
            generate a short filenames or other constant IDs.  As such, we need a deterministic hash code to keep
            generating the same hash code for the same IDs in all sessions regardless of platform so that the
            filenames and other IDs stay the same for backward compatibility.</remarks>
        </member>
        <member name="T:Sandcastle.Core.Constants">
            <summary>
            This class holds a set of constants that define various application values such as the application name,
            common data folder locations, etc.
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Constants.CompanyName">
            <summary>The company name</summary>
        </member>
        <member name="F:Sandcastle.Core.Constants.AppName">
            <summary>The application name</summary>
        </member>
        <member name="F:Sandcastle.Core.Constants.DefaultPresentationStyle">
            <summary>The default presentation style</summary>
        </member>
        <member name="F:Sandcastle.Core.Constants.ProgramDataFolder">
            <summary>
            The application folder in which the component and user data files are stored.
            </summary>
            <remarks>This folder will be located under the <see cref="T:System.Environment.SpecialFolder">CommonApplicationData</see>
            or <see cref="T:System.Environment.SpecialFolder">LocalApplicationData</see> folder.</remarks>
        </member>
        <member name="F:Sandcastle.Core.Constants.ComponentsAndPlugInsFolder">
            <summary>
            This folder is located under the <see cref="T:System.Environment.SpecialFolder">CommonApplicationData</see>
            folder and contains custom build components that can be added to a project.
            </summary>
        </member>
        <member name="T:Sandcastle.Core.HelpFileFormats">
            <summary>
            This public enumerated type defines the type(s) of help file that can be generated
            </summary>
        </member>
        <member name="F:Sandcastle.Core.HelpFileFormats.HtmlHelp1">
            <summary>HTML Help 1 (.chm) format built with HHC.EXE</summary>
        </member>
        <member name="F:Sandcastle.Core.HelpFileFormats.MSHelpViewer">
            <summary>MS Help Viewer (.mshc) format, a ZIP file containing the help content</summary>
        </member>
        <member name="F:Sandcastle.Core.HelpFileFormats.Website">
            <summary>A website with a basic TOC and search panes</summary>
        </member>
        <member name="F:Sandcastle.Core.HelpFileFormats.OpenXml">
            <summary>Open XML (.docx) format, compatible with Microsoft Word and Open Office</summary>
        </member>
        <member name="F:Sandcastle.Core.HelpFileFormats.Markdown">
            <summary>Markdown (.md) format, suitable for use in wikis such as those for GitHub projects</summary>
        </member>
        <member name="T:Sandcastle.Core.MessageLevel">
            <summary>
            This enumerated type defines the message logging levels
            </summary>
        </member>
        <member name="F:Sandcastle.Core.MessageLevel.Info">
            <summary>Informational message</summary>
        </member>
        <member name="F:Sandcastle.Core.MessageLevel.Warn">
            <summary>A warning message (a minor problem)</summary>
        </member>
        <member name="F:Sandcastle.Core.MessageLevel.Error">
            <summary>An error message (a major problem that will stop the build)</summary>
        </member>
        <member name="F:Sandcastle.Core.MessageLevel.Diagnostic">
            <summary>A diagnostic message, useful for debugging</summary>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.ContentFiles">
            <summary>
            This class is used to contain content files for a presentation style that are to be embedded in the
            compiled help file.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.ContentFiles.HelpFileFormats">
            <summary>
            This read-only property returns the help file formats to which these files apply
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.ContentFiles.BasePath">
            <summary>
            This read-only property returns the base path used for the source path files
            </summary>
            <value>If null, the presentation style base path is used</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.ContentFiles.SourcePathWildcard">
            <summary>
            This read-only property returns the source path wildcard used to copy files
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.ContentFiles.DestinationFolder">
            <summary>
            This read-only property returns the destination folder of the content files in the compiled help file
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.ContentFiles.TemplateFileExtensions">
            <summary>
            This read-only property returns an enumerable list of file extensions that should be treated as
            template files that need substitution tags replaced at build time.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.ContentFiles.#ctor(Sandcastle.Core.HelpFileFormats,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="helpFileFormats">The help file formats to which the files apply</param>
            <param name="sourcePath">The source path</param>
            <overloads>There are two overloads for the constructor</overloads>
            <remarks>The files from the source path will be copied to a like named folder in the build output</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.ContentFiles.#ctor(Sandcastle.Core.HelpFileFormats,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="helpFileFormats">The help file formats to which the files apply</param>
            <param name="sourcePath">The source path</param>
            <param name="destination">The destination path to use in the build output</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.ContentFiles.#ctor(Sandcastle.Core.HelpFileFormats,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="helpFileFormats">The help file formats to which the files apply</param>
            <param name="basePath">An alternate base path or null to use the presentation style base path</param>
            <param name="sourcePath">The source path</param>
            <param name="destination">The destination path</param>
            <param name="templateFileExtensions">An enumerable list of file extensions to treat as template files</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.IApiTocGenerator">
            <summary>
            This interface is used to implement a table of contents generator for API content
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.IApiTocGenerator.ListTopicOrder">
            <summary>
            This is used to get or set the list topic order in the table of contents
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.IApiTocGenerator.GenerateApiTocFile(System.String,System.String)">
            <summary>
            This is used to generate a table of contents file for API content
            </summary>
            <param name="reflectionDataFile">The source reflection data file</param>
            <param name="tocFile">The table of contents file to generate</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.IApplyDocumentModel">
            <summary>
            This interface is used to implement the application of a document model to the reflection information
            file.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.IApplyDocumentModel.RootNamespaceContainerId">
            <summary>
            This is used to get or set an optional root namespace container ID
            </summary>
            <value>If not set, no root namespace container node will be added.  If set, a root namespace
            container node (R:) will be added with the given ID.  The build engine will set this based on the
            root namespace container project properties.</value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.IApplyDocumentModel.ApplyDocumentModel(System.String,System.String)">
            <summary>
            This is used to apply the document model to a reflection information file
            </summary>
            <param name="reflectionDataFile">The source reflection data file</param>
            <param name="docModelReflectionDataFile">The destination reflection data file with the document
            model applied to it.</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.IPresentationStyleMetadata">
            <summary>
            This class defines the metadata for a presentation style plug-in
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.IPresentationStyleMetadata.Id">
            <summary>
            This read-only property returns the ID for the presentation style
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.IPresentationStyleMetadata.Title">
            <summary>
            This read-only property returns the title for the presentation style
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.IPresentationStyleMetadata.Description">
            <summary>
            This read-only property returns a brief description of the presentation style
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.IPresentationStyleMetadata.Version">
            <summary>
            This read-only property returns the version of the presentation style
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.IPresentationStyleMetadata.Copyright">
            <summary>
            This read-only property returns the copyright information for the presentation style
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.IPresentationStyleMetadata.IsDeprecated">
            <summary>
            This read-only property is used to indicate that the presentation style has been deprecated
            </summary>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.PlugInDependency">
            <summary>
            This class is used to define a plug-in upon which a presentation style depends and the default
            configuration to use for it.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PlugInDependency.Id">
            <summary>
            The ID of the plug-in upon which the presentation style depends
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PlugInDependency.Configuration">
            <summary>
            The default configuration to use for the plug-in
            </summary>
            <remarks>This can be either an empty <c>configuration</c> element or one filled in with default
            values for any plug-in configuration parameters.  If the plug-in is visible to the user and has been
            added to the project, the project configuration will override this one.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.PlugInDependency.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">The ID of the plug-in depended upon</param>
            <param name="configuration">The default configuration.  If null or empty, an empty
            <c>configuration</c> element will be used.</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.PresentationStyleExportAttribute">
            <summary>
            This is a custom version of the <see cref="T:System.ComponentModel.Composition.ExportAttribute"/> that contains metadata for presentation
            style plug-ins.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleExportAttribute.Id">
            <summary>
            This read-only property is used to get the presentation style ID
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleExportAttribute.Title">
            <summary>
            This read-only property is used to get the presentation style title
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleExportAttribute.Description">
            <summary>
            This is used to get or set a brief description of the presentation style
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleExportAttribute.Version">
            <summary>
            This is used to get or set the presentation style version number
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleExportAttribute.Copyright">
            <summary>
            This is used to get or set copyright information for the presentation style
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleExportAttribute.IsDeprecated">
            <summary>
            This read-only property is used to indicate that the presentation style has been deprecated
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.PresentationStyleExportAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id">The required presentation style ID</param>
            <param name="title">The required presentation style title</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.PresentationStyleSettings">
            <summary>
            This abstract base class is used to define the settings and common functionality for a specific
            presentation style.
            </summary>
            <remarks>Presentation styles are singletons by nature.  The composition container will create instances
            as needed.</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.Location">
            <summary>
            This is overridden in derived classes to provide the location of the presentation style files
            </summary>
            <value>Typically, this will return the path of the executing assembly</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.BasePath">
            <summary>
            This is used to get or set the presentation style base path used to resolve relative paths within the
            presentation style.
            </summary>
            <value>If null or empty, the <see cref="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.Location"/> path is used as the base path.  If relative, it
            is considered to be relative to the <see cref="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.Location"/> path.</value>
            <remarks>This is useful for defining a base path with multiple presentation styles are included
            such as with the standard presentation styles.</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.SupportedFormats">
            <summary>
            This is used to get or set the help file formats supported by the presentation style
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.SupportsNamespaceGrouping">
            <summary>
            This is used to get or set whether or not namespace grouping is supported by the presentation style
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.SupportsCodeSnippetGrouping">
            <summary>
            This is used to get or set whether or not code snippet grouping is supported by the presentation
            style.
            </summary>
            <remarks>If true, code snippets will be grouped and sorted based on the syntax generators present
            in the project.</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.ContentFiles">
            <summary>
            This read-only property returns the list of help content file locations
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.AdditionalResourceItemsFiles">
            <summary>
            This read-only property returns the list of additional resource items files if any
            </summary>
            <remarks>Plug-ins can add files to this list to support localized text that they add</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.DocumentModelApplicator">
            <summary>
            This is used to get or set the document model applicator
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.ApiTableOfContentsGenerator">
            <summary>
            This is used to get or set the table of content generator for API content
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.BuildAssemblerConfiguration">
            <summary>
            This is used to get or set the BuildAssembler configuration filename
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.TopicTransformation">
            <summary>
            This read-only property returns the topic transformation to use
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.PlugInDependencies">
            <summary>
            This read-only property returns any plug-in dependencies required by the presentation style
            </summary>
            <remarks>This is used to ensure that any dependent plug-ins are added to the build.  If any of the
            plug-ins are visible to the user and have been added to the project, the project configuration will
            override the default configuration supplied here.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.ResourceItemFiles(System.String)">
            <summary>
            This is used to get an enumerable list of BuildAssembler resource item files used by the presentation
            style.
            </summary>
            <param name="languageName">The language name for the localized resources.  If the specific language
            is not found, it falls back to the en-US resources which will always exist.</param>
            <returns>An enumerable list of resource item files used by the presentation style</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.CheckForErrors">
            <summary>
            This is used to check the presentation style for errors
            </summary>
            <returns>An enumerable list of problems found or an empty list if everything is okay</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.ResolvePath(System.String)">
            <summary>
            This is used to resolve a presentation style path
            </summary>
            <param name="path">The path to resolve</param>
            <returns>The resolved path</returns>
            <remarks>Environment variables in the path will be expanded.  If relative, the path is converted
            to a full path relative to the presentation style's base path.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.ResolveEnvironmentVariables(System.String)">
            <summary>
            This is used to resolve environment variables in a path with the added step of resolving
            <c>%SHFBROOT%</c> to the path found by the component utilities if it does not resolve automatically.
            </summary>
            <param name="path">The path in which to resolve an environment variable</param>
            <returns>The resolved path value</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.CopyHelpContent(Sandcastle.Core.HelpFileFormats,System.String,System.Action{System.String,System.Object[]},System.Action{System.String,System.String,System.String})">
            <summary>
            This is used to copy the presentation style help file content to the given destination folder
            </summary>
            <param name="format">The help file format for which to copy files</param>
            <param name="destinationBasePath">The destination base path to which the files are copied</param>
            <param name="progressReporter">An optional action delegate used to report progress</param>
            <param name="transformTemplate">A action delegate used to transform a template file (file, source
            folder, destination folder)</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.PresentationStyleSettings.RecursiveCopy(System.String,System.String,System.Action{System.String,System.Object[]},System.Collections.Generic.IEnumerable{System.String},System.Action{System.String,System.String,System.String})">
            <summary>
            This copies files from the specified source folder to the specified destination folder.  If any
            subfolders are found below the source folder and the wildcard is "*.*", the subfolders are also
            copied recursively.
            </summary>
            <param name="sourcePath">The source path from which to copy</param>
            <param name="destPath">The destination path to which to copy</param>
            <param name="progressReporter">An optional action delegate used to report progress</param>
            <param name="templateFileExtensions">An enumerable list of file extensions that will be treated like
            template files and will have substitution tags replaced.</param>
            <param name="transformTemplate">A action delegate used to transform a template file (file, source
            folder, destination folder)</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.StandardApiTocGenerator">
             <summary>
             This is used to generate a standard table of contents for API content
             </summary>
             <remarks>The generator has the following behaviors:
            
             <list type="bullet">
                 <item>The reflection information is assumed to contain list entries for properties, methods, events,
             etc.  These are used to generate corresponding list topic entries in the table of contents.</item>
                 <item>A root namespace container (R:) is supported if present.</item>
                 <item>Namespace grouping is supported if grouping elements (G:) are present.</item>
                 <item>Overloads are assumed to have a container topic and each overload has its own subtopic below
             it.</item>
                 <item>Namespaces, types, and members are sorted in ascending order by name.  Explicit interface
             implementations are list ahead of the type's other members sorted by member name.  Overloads are sorted
             by parameter count and then by the type name of the first parameter.</item>
                 <item>The default order of the member list topics is properties, methods, events, operators, fields,
             attached properties, and finally attached events.</item>
             </list>
             </remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardApiTocGenerator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.StandardApiTocGenerator.ListTopicOrder">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardApiTocGenerator.GenerateApiTocFile(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardApiTocGenerator.AddNamespaceOrTypeTopic(System.Xml.XmlWriter,System.String)">
            <summary>
            Add a namespace, namespace group, or type topic for the given member ID.  Topics are added
            recursively for each of its children and their children.
            </summary>
            <param name="writer">The XML writer to which the output is written</param>
            <param name="memberId">The member ID to add</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardApiTocGenerator.AddMemberListTopics(System.Xml.XmlWriter,Sandcastle.Core.Reflection.ApiMember)">
            <summary>
            Add member list topics for a type (constructors, properties, methods, events, etc.).  The members are
            added as children of each list topic.
            </summary>
            <param name="writer">The XML writer to which the output is written</param>
            <param name="apiType">The type member for which to add member list topics</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardApiTocGenerator.AddMemberListTree(System.Xml.XmlWriter,Sandcastle.Core.Reflection.ApiMember,System.String)">
            <summary>
            Add a member list topic and its children
            </summary>
            <param name="writer">The XML writer to which the output is written</param>
            <param name="list">The member list topic to output</param>
            <param name="declaringTypePrefix">The declaring type's prefix used to filter members</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardApiTocGenerator.AddMember(System.Xml.XmlWriter,Sandcastle.Core.Reflection.ApiMember,System.String)">
            <summary>
            Add a table of contents entry for a member
            </summary>
            <param name="writer">The XML writer to which the output is written</param>
            <param name="member">The member for which to add TOC entry</param>
            <param name="declaringTypePrefix">The declaring type's prefix used to filter members</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.StandardDocumentModel">
             <summary>
             This is used to add the standard document model elements to the reflection information file
             </summary>
             <remarks>The generator has the following behaviors:
             
             <list type="bullet">
                 <item>If a root namespace container ID is specified, a root namespace container API entry (R:) is
             added with a list of the namespaces.  If not specified, it is omitted.</item>
                 <item>A <c>topicdata</c> element is added to each API entry to identify the topic group.  For
             enumeration members (the fields), a <c>notopic</c> attribute is added to indicate that it should not
             get a separate topic.  For explicitly implemented members, an <c>eiiname</c> attribute is added to
             identify the explicitly implemented type and member name.</item>
                 <item><c>library</c> elements are updated with the assembly version and, for type members, a
             <c>NoAptca</c> element is added if the assembly does not allow partially trusted callers.</item>
                 <item>Elements for overloaded methods are grouped into Overload elements within their type's API
             entry.  Extension methods are not grouped if overloaded but do get an <c>overload</c> attribute.</item>
                 <item>The API entries for overloaded members have an <c>overload</c> attribute added to their
             <c>memberdata</c> element to identify the overload topic ID.</item>
                 <item>For all types except enumerations, member list topic API entries are created for methods,
             operators, properties, events, fields, attached properties, attached events, and overloaded members.</item>
             </list>
            </remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardDocumentModel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.StandardDocumentModel.RootNamespaceContainerId">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardDocumentModel.ApplyDocumentModel(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardDocumentModel.AddRootNamespaceContainer(System.Xml.XmlWriter)">
            <summary>
            This adds a root namespace container element
            </summary>
            <param name="writer">The XML writer to which the element is added</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardDocumentModel.UpdateTypeApiNode(Sandcastle.Core.Reflection.ApiMember)">
            <summary>
            This adds documentation model elements to a type node
            </summary>
            <param name="typeNode">The type node to update</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardDocumentModel.UpdateGeneralApiNode(Sandcastle.Core.Reflection.ApiMember)">
            <summary>
            This adds documentation model elements to a general node
            </summary>
            <param name="memberNode">The member node to update</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardDocumentModel.AddMemberListApiElement(System.Xml.XmlWriter,Sandcastle.Core.Reflection.ApiMemberGroup,Sandcastle.Core.Reflection.ApiMember)">
            <summary>
            Add a member list topic of the specified type for the given type node
            </summary>
            <param name="writer">The XML writer to which the element is added</param>
            <param name="listType">The list type to add</param>
            <param name="typeNode">The type node to update</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardDocumentModel.AddOverloadListApiElements(System.Xml.XmlWriter,Sandcastle.Core.Reflection.ApiMember)">
            <summary>
            Add overload list topics for each overloaded member in the type
            </summary>
            <param name="writer">The XML writer to which the element is added</param>
            <param name="typeNode">The type node to update</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardDocumentModel.UpdateMemberListElements(Sandcastle.Core.Reflection.ApiMember,System.Collections.Generic.IEnumerable{Sandcastle.Core.Reflection.ApiMember})">
            <summary>
            Update the member list elements with overload set entries
            </summary>
            <returns>An enumerable list of <c>element</c> elements for the member list</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardDocumentModel.DetermineOverloadId(Sandcastle.Core.Reflection.ApiMember,Sandcastle.Core.Reflection.ApiMember)">
            <summary>
            This is used to determine the ID of an overloads member entry
            </summary>
            <param name="typeNode">The type node to use</param>
            <param name="member">The member to use</param>
            <returns>The ID for the overloads member entry</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardDocumentModel.UpdateElementNode(Sandcastle.Core.Reflection.ApiMember,Sandcastle.Core.Reflection.ApiMember)">
            <summary>
            Update an element node
            </summary>
            <param name="typeNode">The type node</param>
            <param name="member">The member for which to update the element node</param>
            <returns>The node itself if it is an <c>element</c> element or the original <c>element</c> node
            from the containing type if not.</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.StandardDocumentModel.AddLibraryAssemblyData(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Add library assembly information to a library element
            </summary>
            <param name="library">The library element to which the information is added</param>
            <param name="addNoAptca">True to add a <c>noAptca</c> element if partially trusted callers are not
            allowed, false to skip it.</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType">
            <summary>
            This enumerated type defines the sections that are rendered in an API topic
            </summary>
            <remarks>Section order may vary from one presentation style to another and may be customized by plug-ins</remarks>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.Notices">
            <summary>
            The notices such as the preliminary API and obsolete warnings
            </summary>
            <remarks>This is typically rendered at the very top of the topic.</remarks>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.Summary">
            <summary>
            The summary section.
            </summary>
            <remarks>For overload topics, the summary will come from the first <c>overloads</c> element.</remarks>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.InheritanceHierarchyAbbreviated">
            <summary>
            The abbreviated inheritance hierarchy.
            </summary>
            <remarks>  This is typically used in conjunction with <see cref="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.InheritanceHierarchyFull" /> with
            the abbreviated hierarchy appearing at the top of the topic and the full hierarchy appearing at the
            end of the topic if needed if the descendant count exceeds the abbreviated threshold (four
            descendants).  In such cases, the abbreviated hierarchy will have a "More..." link to it.</remarks>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.NamespaceAndAssemblyInfo">
            <summary>
            Namespace and assembly information.
            </summary>
            <remarks>Only API member pages get namespace and assembly info.</remarks>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.SyntaxSection">
            <summary>
            The syntax section.
            </summary>
            <remarks>Only API member pages get a syntax section.  This includes the declaration syntax,
            parameters, templates, return value, and implemented member information.</remarks>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.MemberList">
            <summary>
            A member list based on the topic type (root, root group, namespace group, namespace, enumeration,
            type, or type members).
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.Events">
            <summary>
            The events section.
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.Exceptions">
            <summary>
            The exceptions section.
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.Remarks">
            <summary>
            The remarks section.
            </summary>
            <remarks>For overload topics, the remarks will come from the first <c>overloads</c> element.</remarks>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.Examples">
            <summary>
            The examples section.
            </summary>
            <remarks>For overload topics, the examples will come from the first <c>overloads</c> element.</remarks>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.Platforms">
            <summary>
            The platforms section (reserved for future use).
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.Versions">
            <summary>
            The versions section.
            </summary>
            <remarks>Only API member pages get version information.</remarks>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.Permissions">
            <summary>
            The permissions section.
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.ThreadSafety">
            <summary>
            The thread safety section.
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.RevisionHistory">
            <summary>
            The revision history section.
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.Bibliography">
            <summary>
            The bibliography section.
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.SeeAlso">
            <summary>
            The See Also section.
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.InheritanceHierarchyFull">
            <summary>
            The full inheritance hierarchy.
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType.CustomSection">
            <summary>
            A custom section.
            </summary>
            <remarks>This can be used by plug-ins to add new sections to an API topic.</remarks>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler">
            <summary>
            This handles rendering of an API topic section
            </summary>
            <remarks>API topics are rendered in various sections based on the topic type.  This facilitates rendering
            those sections.</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler.SectionType">
            <summary>
            The section type
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler.CustomSectionName">
            <summary>
            If <see cref="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler.SectionType" /> is <c>CustomSection</c>, this contains the custom section name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler.RenderSection">
            <summary>
            This is the action to perform that will render the section
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler.#ctor(Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType,System.Action{Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore})">
            <summary>
            Constructor for well-known sections
            </summary>
            <param name="sectionType">The section type</param>
            <param name="renderSection">The action to perform that will render the section.  It will be passed
            a reference to the topic transformations.</param>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler.#ctor(Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType,System.String,System.Action{Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore})">
            <summary>
            This constructor supporting specifying a custom section type and name
            </summary>
            <param name="sectionType">The section type</param>
            <param name="customSectionName">The custom section name if this is a custom section</param>
            <param name="renderSection">The action to perform that will render the section.  It will be passed
            a reference to the topic transformations.</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.AutoOutlineType">
            <summary>
            This enumerated type defines the auto-outline type
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.AutoOutlineType.TopLevel">
            <summary>
            Top level with related topics section
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.AutoOutlineType.TopNoRelated">
            <summary>
            Top level without the related topics section
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.AutoOutlineType.Subsection">
            <summary>
            Subsection
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.AutoOutlineType.SubSubsection">
            <summary>
            Sub-subsection
            </summary>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.BibliographyElement">
            <summary>
            This is used to handle general <c>bibliography</c> elements based on the topic type
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.BibliographyElement.BibliographyAuthorStyle">
            <summary>
            This is used to get or set the bibliography author style for HTML output formats
            </summary>
            <value>The default if not set explicitly is "BibliographyAuthor"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.BibliographyElement.BibliographyTitleStyle">
            <summary>
            This is used to get or set the bibliography title style for HTML output formats
            </summary>
            <value>The default if not set explicitly is "BibliographyTitle"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.BibliographyElement.BibliographyPublisherStyle">
            <summary>
            This is used to get or set the bibliography publisher style for HTML output formats
            </summary>
            <value>The default if not set explicitly is "BibliographyPublisher"</value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.BibliographyElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.BibliographyElement.DetermineCitations(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore)">
            <summary>
            Determine unique citations in the current topic if not already done
            </summary>
            <param name="transformation">The topic transformation from which to get the citations</param>
            <returns>The unique citations in the current topic in the order that they were encountered</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.BibliographyElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.BibliographyElement.RenderHtmlCitation(System.Xml.Linq.XElement,System.Int32,System.Xml.Linq.XElement)">
            <summary>
            Render a citation for HTML output formats
            </summary>
            <param name="reference">The citation reference to render</param>
            <param name="citationNumber">The citation number</param>
            <param name="content">The content element to which the citation is added</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.BibliographyElement.RenderMarkdownCitation(System.Xml.Linq.XElement,System.Int32,System.Xml.Linq.XElement)">
            <summary>
            Render a citation for markdown output formats
            </summary>
            <param name="reference">The citation reference to render</param>
            <param name="citationNumber">The citation number</param>
            <param name="content">The content element to which the citation is added</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.BibliographyElement.RenderOpenXmlCitation(System.Xml.Linq.XElement,System.Int32,System.Xml.Linq.XElement)">
            <summary>
            Render a citation for Open XML output formats
            </summary>
            <param name="reference">The citation reference to render</param>
            <param name="citationNumber">The citation number</param>
            <param name="content">The content element to which the citation is added</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.CiteElement">
            <summary>
            This is used to handle general <c>cite</c> elements in a topic
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.CiteElement.CitationStyle">
            <summary>
            This is used to get or set the citation style for HTML output formats
            </summary>
            <value>The default if not set explicitly is "citation"</value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.CiteElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.CiteElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.CodeEntityReferenceElement">
            <summary>
            This handles <c>codeEntityReference</c> elements
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.CodeEntityReferenceElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.CodeEntityReferenceElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.CodeExampleElement">
            <summary>
            This is used to handle <c>codeExample</c> elements in a topic
            </summary>
            <remarks>The first <c>codeExample</c> element encountered will create a section and all other
            <c>codeExample</c> elements within the parent element will be included in the section and will not be
            processed separately.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.CodeExampleElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.CodeExampleElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.ConvertibleElement">
            <summary>
            This handles elements that are converted to a different element name and have an optional style
            attribute.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.ConvertibleElement.RenderedName">
            <summary>
            This read-only property returns the element name that will be rendered in the topic
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.ConvertibleElement.StyleName">
            <summary>
            This read-only property returns the style name if specified
            </summary>
            <value>If null, no style attribute will be rendered</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.ConvertibleElement.Addressable">
            <summary>
            This read-only property returns true if the element is addressable (it can have an address attribute
            that serves as a link target).
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.ConvertibleElement.ValueAttributeName">
            <summary>
            This read-only property returns the name of the attribute value from which to get the value for the
            converted element's content.  If null, the elements nodes are used instead.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ConvertibleElement.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The element name</param>
            <param name="renderedElement">The element name to use in the rendered topic</param>
            <overloads>There are three overloads for the constructor</overloads>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ConvertibleElement.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name">The element name</param>
            <param name="renderedElement">The element name to use in the rendered topic</param>
            <param name="addressable">True if it can have an address attribute, false if not</param>
            <overloads>There are three overloads for the constructor</overloads>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ConvertibleElement.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The element name</param>
            <param name="renderedElement">The element name to use in the rendered topic</param>
            <param name="styleName">The style name to use in the style attribute</param>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ConvertibleElement.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The element name</param>
            <param name="valueAttributeName">The attribute name from which to get the value to render in the content</param>
            <param name="renderedElement">The element name to use in the rendered topic</param>
            <param name="styleName">The style name to use in the style attribute</param>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ConvertibleElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.CopyrightElement">
            <summary>
            This handles <c>copyright</c> elements
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.CopyrightElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.CopyrightElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Element">
            <summary>
            This abstract base class is used to create rendered elements in API and MAML topics
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Element.Ddue">
            <summary>
            The root MAML namespace
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Element.Xlink">
            <summary>
            The XML linking language namespace
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Element.XmlSpace">
            <summary>
            The xml:space name
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Element.NonBreakingSpace">
            <summary>
            A non-breaking space
            </summary>
            <remarks><c>XText</c> doesn't write out entities in text such as "&#160;" so we need to use literal
            characters instead.</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Element.Name">
            <summary>
            This read-only property returns the element name
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Element.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The element name</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Element.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <summary>
            Render the element to the topic
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="element">The element to handle</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.ExternalLinkElement">
            <summary>
            This handles <c>externalLink</c> elements
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ExternalLinkElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ExternalLinkElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.AutoOutlineElement">
             <summary>
             This is used to handle <c>autoOutline</c> elements in a topic
             </summary>
             <remarks><para>This element inserts a bullet list of links to the topic's sections or a section's
             sub-sections with optional support for limiting the expansion down to a specific level.  Authors can use
             the tag directly or specify a token (defined in a token file) in a topic's introduction to get a bullet
             list of the sections; or in a <c>ddue:section</c>/<c>ddue:content</c> to get a bullet list of the
             section's sub-sections.  If the token is used, the shared content component replaces
             <c>&lt;token&gt;autoOutline&lt;/token&gt;</c> with an <c>&lt;autoOutline/&gt;</c> node that you specify
             in the token's content.  This was the old way of doing it but this version allows it to be specified
             directly like any other MAML tag.</para>
             
             <para>The <c>excludeRelatedTopics</c> attribute can be set to true to exclude the link to the related
             topics section if present or set to false to omit it.  If not specified, the default is true to include
             it.</para>
             
             <para>The <c>lead</c> attribute can be included to specify the lead in text.  It can be set to "none"
             to omit the lead in text.  If omitted, default lead in text will be used.</para>
             
             <para>Examples:</para></remarks>
             <example>
             <code language="xml">
             &lt;!-- Show only top-level topic titles, default lead-in text, includes related
             topics link --&gt;
             &lt;autoOutline/&gt;
             
             &lt;!-- Show only top-level topic titles without the related topics link, default
             lead-in text --&gt;
             &lt;autoOutline excludeRelatedTopics="true"/&gt;
             
             &lt;!-- Add custom lead-in text --&gt;
             &lt;autoOutline excludeRelatedTopics="true" lead="Changes in this release" /&gt;
             
             &lt;!-- Show top-level titles and titles for one level down, default lead-in text,
             includes related topics link --&gt;
             &lt;autoOutline&gt;1&lt;/autoOutline&gt;
            
             &lt;-- Show top-level titles and titles for one level down, omit the lead-in text
             &lt;autoOutline lead="none"&gt;1&lt;/autoOutline&gt; --&gt;
            
             &lt;-- Show titles from the top down to three levels, default lead-in text, includes
             related topics link --&gt;
             &lt;autoOutline&gt;3&lt;/autoOutline&gt;
             </code>
             </example>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.AutoOutlineElement.TopLevelStyleName">
            <summary>
            This is used to set a style class name on top-level auto-outlines
            </summary>
            <remarks>This is useful for hiding top-level auto-outlines on all but certain devices if another
            element on the page displays section headers such as In This Article quick links.  Custom lead text,
            if specified, will still be rendered as it may not refer to the auto-outline.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.AutoOutlineElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.AutoOutlineElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.AutoOutlineElement.InsertAutoOutline(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.String,Sandcastle.Core.PresentationStyle.Transformation.Elements.AutoOutlineType,System.Int32,System.Int32)">
            <summary>
            Insert an auto-outline
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="renderTo">The parent element to which the outline will be rendered</param>
            <param name="content">The content from which to get the auto-outline sections</param>
            <param name="leadIn">The lead in text</param>
            <param name="outlineType">The outline type</param>
            <param name="currentDepth">The current outline depth</param>
            <param name="maxDepth">The maximum outline depth</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementLanguageFilter">
            <summary>
            This is used to handle general <c>codeSnippetGroup</c> elements in a topic for presentation styles that
            use a page-level language filter selector.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementLanguageFilter.CodeSnippetTemplatePath">
            <summary>
            This is used to get or set the code snippet template file path
            </summary>
            <value>If not set by the owning transformation or something else, the element will try to resolve
            the default path on first use.</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementLanguageFilter.CodeSnippetNumberedTemplatePath">
            <summary>
            This is used to get or set the code snippet template file path that contains an element block for
            line numbers.
            </summary>
            <value>If not set by the owning transformation or something else, the element will try to resolve
            the default path on first use.</value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementLanguageFilter.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementLanguageFilter.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed">
            <summary>
            This is used to handle general <c>codeSnippetGroup</c> elements in a topic for legacy presentation
            styles such as the VS2013 presentation style.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed.CodeSnippetContainerStyle">
            <summary>
            This is used to get or set the code snippet container style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainer"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed.CodeSnippetContainerTabsStyle">
            <summary>
            This is used to get or set the code snippet container tabs style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainerTabs"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed.CodeSnippetContainerTabStyle">
            <summary>
            This is used to get or set the code snippet container tab style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainerTab"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed.CodeSnippetContainerTabSingleStyle">
            <summary>
            This is used to get or set the code snippet container tab single style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainerTabSingle"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed.CodeSnippetContainerTabPhantomStyle">
            <summary>
            This is used to get or set the code snippet container tab phantom style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainerTabPhantom"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed.CodeSnippetContainerCodeContainerStyle">
            <summary>
            This is used to get or set the code snippet container code container style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainerCodeContainer"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed.CodeSnippetToolBarStyle">
            <summary>
            This is used to get or set the code snippet toolbar style
            </summary>
            <value>The default if not set explicitly is "codeSnippetToolBar"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed.CodeSnippetToolBarTextStyle">
            <summary>
            This is used to get or set the code snippet toolbar text style
            </summary>
            <value>The default if not set explicitly is "codeSnippetToolBarText"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed.CopyCodeSnippetStyle">
            <summary>
            This is used to get or set the copy code snippet style
            </summary>
            <value>The default if not set explicitly is "copyCodeSnippet"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed.CodeSnippetContainerCodeStyle">
            <summary>
            This is used to get or set the code snippet container code style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainerCode"</value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.CodeSnippetGroupElementTabbed.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.EntryElement">
            <summary>
            Handle the <c>entry</c> element based on the parent element
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.EntryElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.EntryElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement">
            <summary>
            This is used to handle <c>glossary</c> elements in a topic
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.NoLinkStyle">
            <summary>
            This is used to get or set the "no link" style
            </summary>
            <value>The default if not set explicitly is "noLink"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.GlossaryDivisionStyle">
            <summary>
            This is used to get or set the glossary division style
            </summary>
            <value>The default if not set explicitly is "glossaryDiv"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.GlossaryHorizontalRuleStyle">
            <summary>
            This is used to get or set the glossary horizontal rule style
            </summary>
            <value>The default if not set explicitly is "glossaryRule"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.GlossaryGroupStyle">
            <summary>
            This is used to get or set the glossary group style
            </summary>
            <value>The default if not set explicitly is "glossaryGroup"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.GlossaryGroupHeadingStyle">
            <summary>
            This is used to get or set the glossary group heading style
            </summary>
            <value>The default if not set explicitly is "glossaryGroupHeading"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.GlossaryGroupListStyle">
            <summary>
            This is used to get or set the glossary group list style
            </summary>
            <value>The default if not set explicitly is "glossaryGroupList"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.GlossaryEntryStyle">
            <summary>
            This is used to get or set the glossary entry style
            </summary>
            <value>The default if not set explicitly is "glossaryEntry"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.RelatedEntryStyle">
            <summary>
            This is used to get or set the glossary related entry style
            </summary>
            <value>The default if not set explicitly is "relatedEntry"</value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.RenderGlossaryDivision(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <summary>
            Render a glossary division
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="glossaryDiv">The glossary division to render</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.RenderGlossaryLetterBar(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XElement)">
            <summary>
            Render a glossary letter bar
            </summary>
            <param name="glossaryDiv">The glossary division for which to render the letter bar</param>
            <param name="id">An optional ID for the section containing the letter bar</param>
            <param name="content">The content element to which the letter bar is rendered</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.GlossaryElement.RenderGlossaryEntries(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.String,System.Xml.Linq.XElement)">
            <summary>
            Render the glossary division entries
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="glossaryDiv">The glossary division for which to render the entries</param>
            <param name="id">An optional ID for the section containing the entries</param>
            <param name="content">The content element to which the glossary entries are rendered</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText">
            <summary>
            This class is used to define language specific text used by a presentation style
            </summary>
            <remarks>These elements are translated to script calls by the Language Specific Text build component in
            HTML-based presentation styles.  In those that don't support script such as Open XML, the build task that
            generates the final content replaces them with the neutral text equivalent or removes them.</remarks>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.LanguageSpecificTextStyleName">
            <summary>
            The style name to use for language specific text.  This is used by the build component.
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.CPlusPlus">
            <summary>
            This represents the C++ language identifier
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.CSharp">
            <summary>
            This represents the C# language identifier
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.VisualBasic">
            <summary>
            This represents the Visual Basic language identifier
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.FSharp">
            <summary>
            This represents the F# language identifier
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.Neutral">
            <summary>
            This represents the neutral language identifier
            </summary>
            <value>The text for this value will be used if it doesn't have a specific match in the topic's
            language filter selection.  Typically, this is used when the same keyword can be used for multiple
            languages.</value>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.NameSeparator">
            <summary>
            This represents the common name separators
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.TypeSpecializationOpening">
            <summary>
            This represents the common generic type specialization opening characters (&lt;T&gt;)
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.TypeSpecializationClosing">
            <summary>
            This represents the common generic type specialization closing characters (&lt;T&gt;)
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.ArrayOfOpening">
            <summary>
            This represents the "array of" opening text.  Closing text is rendered dynamically due to the need
            to show rank if defined.
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.ReferenceTo">
            <summary>
            This represents the closing text for "reference to" characters
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.ApplyKeywordStyle">
            <summary>
            This read-only property returns true if the <see cref="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.KeywordStyleName" /> will be applied to the
            rendered language-specific text or false if not.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.Text">
            <summary>
            This read-only property returns an enumerable list of the language specific text
            </summary>
            <value>The key is the language identifier and the value is the text to show for the related language</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.KeywordStyleName">
            <summary>
            This is used to get or set the keyword style name
            </summary>
            <value>The default if not set is <c>keyword</c></value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Constructor
            </summary>
            <param name="applyKeywordStyle">True to apply the <see cref="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.KeywordStyleName" /> to the rendered
            language-specific text, false to not apply it.</param>
            <param name="text">An enumerable list of tuples containing the language ID and related text to display</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.Render">
            <summary>
            Render the language specific text
            </summary>
            <returns>An XML element containing the language specific text for the keyword</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText.RenderKeyword(System.String)">
            <summary>
            This can be used to render an unrecognized language keyword with an appropriate style
            </summary>
            <param name="keyword">The keyword to render</param>
            <returns>An XML element containing the rendered keyword</returns>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.ListElement">
            <summary>
            This handles <c>list</c> elements based on the topic type
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.ListElement.NoBulletStyle">
            <summary>
            This is used to get or set the "no bullet" list style
            </summary>
            <value>The default if not set explicitly is <c>noBullet</c></value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.ListElement.TableStyle">
            <summary>
            This is used to get or set the overall table style
            </summary>
            <value>The default if not set explicitly is <c>table is-hoverable"</c></value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.ListElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.ListElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.ListElement.RenderMamlList(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <summary>
            Render a list element in a MAML topic
            </summary>
            <param name="transformation">The transformation in use</param>
            <param name="element">The element to render</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.ListElement.RenderXmlCommentsList(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <summary>
            Render a list element in XML comments in an API topic
            </summary>
            <param name="transformation">The transformation in use</param>
            <param name="element">The element to render</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.MediaLinkElement">
            <summary>
            This handles <c>mediaLinkInline</c> elements
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.MediaLinkElement.MediaElement">
            <summary>
            The element used to contain the media link
            </summary>
            <value>The default if not set explicitly is <c>figure</c></value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.MediaLinkElement.MediaCaptionElement">
            <summary>
            The element used to contain the media link caption
            </summary>
            <value>The default if not set explicitly is <c>figcaption</c></value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.MediaLinkElement.CaptionStyle">
            <summary>
            This is used to get or set the image caption style
            </summary>
            <value>No style is applied if not set explicitly</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.MediaLinkElement.CaptionLeadTextStyle">
            <summary>
            This is used to get or set the caption lead text style
            </summary>
            <value>No style is applied if not set explicitly</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.MediaLinkElement.MediaNearStyle">
            <summary>
            This is used to get or set the media near style
            </summary>
            <value>The default if not set explicitly is <c>mediaNear</c></value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.MediaLinkElement.MediaCenterStyle">
            <summary>
            This is used to get or set the media center style
            </summary>
            <value>The default if not set explicitly is <c>mediaCenter</c></value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.MediaLinkElement.MediaFarStyle">
            <summary>
            This is used to get or set the media far style
            </summary>
            <value>The default if not set explicitly is <c>mediaFar</c></value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.MediaLinkElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.MediaLinkElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementLanguageFilter">
            <summary>
            This is used to handle <c>syntax</c> elements in a topic for presentation styles that use a page-level
            language filter selector.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementLanguageFilter.RequestExampleUrlArgName">
            <summary>
            This read-only property returns the Request Example URL transformation argument name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementLanguageFilter.BaseSourceCodeUrlArgName">
            <summary>
            This read-only property returns the base source code URL transformation argument name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementLanguageFilter.SyntaxSectionCodeTemplatePath">
            <summary>
            This is used to get or set the syntax section code template file path
            </summary>
            <value>If not set by the owning transformation or something else, the element will try to resolve
            the default path on first use.</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementLanguageFilter.NamespaceAndAssemblyInfoRenderer">
            <summary>
            This is used to get or set the action delegate use to render the namespace and assembly information
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementLanguageFilter.InheritanceHierarchyRenderer">
            <summary>
            This is used to get or set the action delegate use to render the inheritance hierarchy information
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementLanguageFilter.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="requestExampleUrlArgName">The Request Example URL transformation argument name to use or
            null if there isn't one.</param>
            <param name="baseSourceCodeUrlArgName">The base source code URL transformation argument name to use
            or null if there isn't one.</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementLanguageFilter.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementLanguageFilter.RenderSyntaxSections(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Render the syntax sections
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="element">The element containing the syntax sections</param>
            <param name="content">The content element to which the sections will be added</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementLanguageFilter.RenderXamlSyntaxBlock(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Render XAML syntax blocks based on the API member type
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="xamlSnippet">The XAML snippet to render</param>
            <param name="content">The content element to which the syntax will be added</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementLanguageFilter.RenderDefaultReturnSection(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <summary>
            Render a default return section for a member without any explicit comments based on the member's
            return value type.
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="content">The content element to which the section will be added</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed">
            <summary>
            This is used to handle <c>syntax</c> elements in a topic for legacy presentation styles such as the
            VS2013 presentation style.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.RequestExampleUrlArgName">
            <summary>
            This read-only property returns the Request Example URL transformation argument name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.BaseSourceCodeUrlArgName">
            <summary>
            This read-only property returns the base source code URL transformation argument name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.LinkButtonStyle">
            <summary>
            This is used to get or set the link button style
            </summary>
            <value>The default if not set explicitly is "button"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.CodeSnippetContainerStyle">
            <summary>
            This is used to get or set the code snippet container style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainer"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.CodeSnippetContainerTabsStyle">
            <summary>
            This is used to get or set the code snippet container tabs style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainerTabs"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.CodeSnippetContainerTabStyle">
            <summary>
            This is used to get or set the code snippet container tab style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainerTab"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.CodeSnippetContainerTabSingleStyle">
            <summary>
            This is used to get or set the code snippet container tab single style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainerTabSingle"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.CodeSnippetContainerTabPhantomStyle">
            <summary>
            This is used to get or set the code snippet container tab phantom style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainerTabPhantom"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.CodeSnippetContainerCodeContainerStyle">
            <summary>
            This is used to get or set the code snippet container code container style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainerCodeContainer"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.CodeSnippetToolBarStyle">
            <summary>
            This is used to get or set the code snippet toolbar style
            </summary>
            <value>The default if not set explicitly is "codeSnippetToolBar"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.CodeSnippetToolBarTextStyle">
            <summary>
            This is used to get or set the code snippet toolbar text style
            </summary>
            <value>The default if not set explicitly is "codeSnippetToolBarText"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.CopyCodeSnippetStyle">
            <summary>
            This is used to get or set the copy code snippet style
            </summary>
            <value>The default if not set explicitly is "copyCodeSnippet"</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.CodeSnippetContainerCodeStyle">
            <summary>
            This is used to get or set the code snippet container code style
            </summary>
            <value>The default if not set explicitly is "codeSnippetContainerCode"</value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="requestExampleUrlArgName">The Request Example URL transformation argument name to use or
            null if there isn't one.</param>
            <param name="baseSourceCodeUrlArgName">The base source code URL transformation argument name to use
            or null if there isn't one.</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.RenderSyntaxSections(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Render the syntax sections
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="element">The element containing the syntax sections</param>
            <param name="content">The content element to which the sections will be added</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.RenderXamlSyntaxBlock(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Render XAML syntax blocks based on the API member type
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="xamlSnippet">The XAML snippet to render</param>
            <param name="content">The content element to which the syntax will be added</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.RenderDefaultReturnSection(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <summary>
            Render a default return section for a member without any explicit comments based on the member's
            return value type.
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="content">The content element to which the section will be added</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.SyntaxElementTabbed.RenderSourceContextElement(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Render the View Source and Request Example buttons for the source context element
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="sourceContext">The element containing the source context information</param>
            <param name="content">The content element to which the sections will be added</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.TableElement">
            <summary>
            This handles the <c>table</c> element based on the topic type
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.TableElement.TableCaptionStyle">
            <summary>
            This is used to get or set the table caption style
            </summary>
            <value>The default if not set explicitly is <c>caption</c></value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.TableElement.TableStyle">
            <summary>
            This is used to get or set the overall table style
            </summary>
            <value>The default if not set explicitly is <c>table is-hoverable</c></value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.TableElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.TableElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.IgnoredElement">
            <summary>
            This can be used to completely ignore an element and any child elements it contains so that they are not
            rendered in the topic at all.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.IgnoredElement.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.IgnoredElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.ImplementsElement">
            <summary>
            This handles the <c>implements</c> element in a syntax section
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ImplementsElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ImplementsElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.IntroductionElement">
            <summary>
            This is used to handle <c>introduction</c> elements in a topic
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.IntroductionElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.IntroductionElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.LanguageKeywordElement">
            <summary>
            This handles <c>languageKeyword</c> elements
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.LanguageKeywordElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.LanguageKeywordElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.LegacyLinkElement">
            <summary>
            This handles <c>legacyLink</c> elements
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.LegacyLinkElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.LegacyLinkElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.LinkElement">
            <summary>
            This handles <c>link</c> elements
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.LinkElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.LinkElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.CodeElement">
            <summary>
            This is used to handle <c>code</c> and <c>snippet</c> elements in a topic for markdown presentation
            styles.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.CodeElement.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The element name</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.CodeElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.GlossaryElement">
            <summary>
            This is used to handle <c>glossary</c> elements in a topic for markdown presentation styles
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.GlossaryElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.GlossaryElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.GlossaryElement.RenderGlossaryDivision(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <summary>
            Render a glossary division
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="glossaryDiv">The glossary division to render</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.GlossaryElement.RenderGlossaryLetterBar(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XElement)">
            <summary>
            Render a glossary letter bar
            </summary>
            <param name="glossaryDiv">The glossary division for which to render the letter bar</param>
            <param name="id">An optional ID for the section containing the letter bar</param>
            <param name="content">The content element to which the letter bar is rendered</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.GlossaryElement.RenderGlossaryEntries(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.String,System.Xml.Linq.XElement)">
            <summary>
            Render the glossary division entries
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="glossaryDiv">The glossary division for which to render the entries</param>
            <param name="id">An optional ID for the section containing the entries</param>
            <param name="content">The content element to which the glossary entries are rendered</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.MarkdownElement">
            <summary>
            This handles parent elements that are enclosed in markdown syntax
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.MarkdownElement.ValueAttributeName">
            <summary>
            This read-only property returns the name of the attribute value from which to get the value for the
            converted element's content.  If null, the elements nodes are used instead.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.MarkdownElement.PrefixSyntax">
            <summary>
            This read-only property returns the prefix Markdown syntax
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.MarkdownElement.SuffixSyntax">
            <summary>
            This read-only property returns the suffix Markdown syntax
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.MarkdownElement.FallbackElement">
            <summary>
            This read-only property returns the fallback HTML element to use if a block parent HTML element is
            detected that will cause the markdown syntax to be ignored.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.MarkdownElement.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The element name</param>
            <param name="prefixSyntax">The markdown prefix syntax character(s) to use before the content or null
            if there isn't any</param>
            <param name="suffixSyntax">The markdown suffix syntax character(s) to use after the content or
            null if there isn't any</param>
            <param name="fallbackElement">The fallback HTML element to use if a block parent HTML element is
            detected that will cause the markdown syntax to be ignored.</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.MarkdownElement.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The element name</param>
            <param name="valueAttributeName">The attribute name from which to get the value to render in the content</param>
            <param name="prefixSyntax">The markdown prefix syntax character(s) to use before the content or null
            if there isn't any</param>
            <param name="suffixSyntax">The markdown suffix syntax character(s) to use after the content or
            null if there isn't any</param>
            <param name="fallbackElement">The fallback HTML element to use if a block parent HTML element is
            detected that will cause the markdown syntax to be ignored.</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.MarkdownElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.MarkdownElement.AddAddressBookmark(System.Xml.Linq.XElement,System.String)">
            <summary>
            Add a bookmark for an address attribute
            </summary>
            <param name="content">The content element to which the bookmark is added</param>
            <param name="uniqueId">The unique ID to use for the bookmark</param>
            <remarks>Open XML does not support ID attributes like HTML.  Instead, it renders bookmarks with the
            unique IDs that will be used as the link targets.  The Open XML file builder task will reformat the
            bookmark name and ID to ensure that they are all unique.</remarks>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.SyntaxElement">
            <summary>
            This is used to handle <c>syntax</c> elements in markdown presentation styles topics
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.SyntaxElement.BaseSourceCodeUrlArgName">
            <summary>
            This read-only property returns the base source code URL transformation argument name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.SyntaxElement.NamespaceAndAssemblyInfoRenderer">
            <summary>
            This is used to get or set the action delegate use to render the namespace and assembly information
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.SyntaxElement.InheritanceHierarchyRenderer">
            <summary>
            This is used to get or set the action delegate use to render the inheritance hierarchy information
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.SyntaxElement.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="baseSourceCodeUrlArgName">The base source code URL transformation argument name to use
            or null if there isn't one.</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.SyntaxElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.SyntaxElement.RenderSyntaxSections(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Render the syntax sections
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="element">The element containing the syntax sections</param>
            <param name="content">The content element to which the sections will be added</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.SyntaxElement.RenderXamlSyntaxBlock(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Render XAML syntax blocks based on the API member type
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="xamlSnippet">The XAML snippet to render</param>
            <param name="content">The content element to which the syntax will be added</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.Markdown.SyntaxElement.RenderDefaultReturnSection(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <summary>
            Render a default return section for a member without any explicit comments based on the member's
            return value type.
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="content">The content element to which the section will be added</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.MarkupElement">
            <summary>
            This handles the <c>markup</c> element, a parent element that does not itself have any rendered
            representation.  It just clones the child nodes, removes any XML namespaces, and passes them through
            as-is.
            </summary>
            <remarks><para>This will allow build components and topic authors to add HTML or other elements such as
            <c>include</c> elements for localized shared content to a pre-transformed document.  This prevents it
            from being removed as unrecognized content by the transformations.</para>
            
            <para>An optional <c>contentType</c> attribute is supported that defines the type of content (Html,
            OpenXml, or Markdown).  This allows rendering of content based on the content type supported by the
            presentation style.</para>
            
            <para>When specified, presentation styles that only support Open XML will only render markup element
            content with a content type of "OpenXml".  Presentation styles that only support Markdown will only
            render markup element content with a content type of "Html" or "Markdown".  All others will only render
            the content if the type is "Html".  If the attribute is omitted, the content will be rendered regardless
            of the presentation style's formats whether or not they actually support it.</para></remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.MarkupElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.MarkupElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.MediaLinkInlineElement">
            <summary>
            This handles <c>mediaLinkInline</c> elements
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.MediaLinkInlineElement.MediaStyle">
            <summary>
            This is used to get or set the media style for HTML formats
            </summary>
            <value>The default if not set explicitly is <c>mediaInline</c></value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.MediaLinkInlineElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.MediaLinkInlineElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.NamedSectionElement">
            <summary>
            This is used to handle named section elements in a topic
            </summary>
            <remarks>The title is assumed to be a localized include item named after the element with a "title_"
            prefix.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.NamedSectionElement.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.NamedSectionElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.NonRenderedParentElement">
            <summary>
            This handles parent elements that do not themselves have any rendered representation.  It simply parses
            each of the child nodes in the given element if it has any and renders those as needed.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.NonRenderedParentElement.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <remarks>This element only contains child elements and has no title.  If it contains a title
            element, it will be ignored.</remarks>
            <param name="name">The element name</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.NonRenderedParentElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.NoteElement">
            <summary>
            This is used to handle <c>note</c> and <c>alert</c> elements in a topic
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.NoteElement.NoteAlertTemplatePath">
            <summary>
            This is used to get or set the Note alert template file path
            </summary>
            <value>If not set by the owning transformation or something else, the element will try to resolve
            the default path on first use.</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.NoteElement.CautionAlertTemplatePath">
            <summary>
            This is used to get or set the Caution alert template file path
            </summary>
            <value>This must be set by the owning transformation</value>
            <value>If not set by the owning transformation or something else, the element will try to resolve
            the default path on first use.</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.NoteElement.SecurityAlertTemplatePath">
            <summary>
            This is used to get or set the Security alert template file path
            </summary>
            <value>This must be set by the owning transformation</value>
            <value>If not set by the owning transformation or something else, the element will try to resolve
            the default path on first use.</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.NoteElement.LanguageAlertTemplatePath">
            <summary>
            This is used to get or set the Language alert template file path
            </summary>
            <value>This must be set by the owning transformation</value>
            <value>If not set by the owning transformation or something else, the element will try to resolve
            the default path on first use.</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.NoteElement.ToDoAlertTemplatePath">
            <summary>
            This is used to get or set the To Do alert template file path
            </summary>
            <value>This must be set by the owning transformation</value>
            <value>If not set by the owning transformation or something else, the element will try to resolve
            the default path on first use.</value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.NoteElement.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.NoteElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.AutoOutlineElement">
             <summary>
             This is used to handle <c>autoOutline</c> elements in a topic
             </summary>
             <remarks><para>This element inserts a bullet list of links to the topic's sections or a section's
             sub-sections with optional support for limiting the expansion down to a specific level.  Authors can use
             the tag directly or specify a token (defined in a token file) in a topic's introduction to get a bullet
             list of the sections; or in a <c>ddue:section</c>/<c>ddue:content</c> to get a bullet list of the
             section's sub-sections.  If the token is used, the shared content component replaces
             <c>&lt;token&gt;autoOutline&lt;/token&gt;</c> with an <c>&lt;autoOutline/&gt;</c> node that you specify
             in the token's content.  This was the old way of doing it but this version allows it to be specified
             directly like any other MAML tag.</para>
             
             <para>The <c>excludeRelatedTopics</c> attribute can be set to true to exclude the link to the related
             topics section if present or set to false to omit it.  If not specified, the default is true to include
             it.</para>
             
             <para>The <c>lead</c> attribute can be included to specify the lead in text.  It can be set to "none"
             to omit the lead in text.  If omitted, default lead in text will be used.</para>
             
             <para>Examples:</para></remarks>
             <example>
             <code language="xml">
             &lt;!-- Show only top-level topic titles, default lead-in text, includes related
             topics link --&gt;
             &lt;autoOutline/&gt;
             
             &lt;!-- Show only top-level topic titles without the related topics link, default
             lead-in text --&gt;
             &lt;autoOutline excludeRelatedTopics="true"/&gt;
             
             &lt;!-- Add custom lead-in text --&gt;
             &lt;autoOutline excludeRelatedTopics="true" lead="Changes in this release" /&gt;
             
             &lt;!-- Show top-level titles and titles for one level down, default lead-in text,
             includes related topics link --&gt;
             &lt;autoOutline&gt;1&lt;/autoOutline&gt;
            
             &lt;-- Show top-level titles and titles for one level down, omit the lead-in text
             &lt;autoOutline lead="none"&gt;1&lt;/autoOutline&gt; --&gt;
            
             &lt;-- Show titles from the top down to three levels, default lead-in text, includes
             related topics link --&gt;
             &lt;autoOutline&gt;3&lt;/autoOutline&gt;
             </code>
             </example>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.AutoOutlineElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.AutoOutlineElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.AutoOutlineElement.InsertAutoOutline(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.String,Sandcastle.Core.PresentationStyle.Transformation.Elements.AutoOutlineType,System.Int32,System.Int32)">
            <summary>
            Insert an auto-outline
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="renderTo">The parent element to which the outline will be rendered</param>
            <param name="content">The content from which to get the auto-outline sections</param>
            <param name="leadIn">The lead in text</param>
            <param name="outlineType">The outline type</param>
            <param name="currentDepth">The current outline depth</param>
            <param name="maxDepth">The maximum outline depth</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.CodeElement">
            <summary>
            This is used to handle <c>code</c> and <c>snippet</c> elements in a topic for Open XML presentation
            styles.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.CodeElement.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The element name</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.CodeElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.DefinedTermElement">
            <summary>
            This handles defined term elements based on the topic type
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.DefinedTermElement.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.DefinedTermElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.GlossaryElement">
            <summary>
            This is used to handle <c>glossary</c> elements in a topic
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.GlossaryElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.GlossaryElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.GlossaryElement.RenderGlossaryDivision(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <summary>
            Render a glossary division
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="glossaryDiv">The glossary division to render</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.GlossaryElement.RenderGlossaryLetterBar(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XElement)">
            <summary>
            Render a glossary letter bar
            </summary>
            <param name="glossaryDiv">The glossary division for which to render the letter bar</param>
            <param name="id">An optional ID for the section containing the letter bar</param>
            <param name="content">The content element to which the letter bar is rendered</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.GlossaryElement.RenderGlossaryEntries(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.String,System.Xml.Linq.XElement)">
            <summary>
            Render the glossary division entries
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="glossaryDiv">The glossary division for which to render the entries</param>
            <param name="id">An optional ID for the section containing the entries</param>
            <param name="content">The content element to which the glossary entries are rendered</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.HorizontalRuleElement">
            <summary>
            This handles horizontal rule HTML elements in Open XMl topics
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.HorizontalRuleElement.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.HorizontalRuleElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.LineBreakElement">
            <summary>
            This handles line break elements in Open XMl topics
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.LineBreakElement.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.LineBreakElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.ListElement">
            <summary>
            This handles <c>list</c> elements based on the topic type
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.ListElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.ListElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.ListElement.RenderMamlList(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <summary>
            Render a list element in a MAML topic
            </summary>
            <param name="transformation">The transformation in use</param>
            <param name="element">The element to render</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.ListElement.RenderXmlCommentsList(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <summary>
            Render a list element in XML comments in an API topic
            </summary>
            <param name="transformation">The transformation in use</param>
            <param name="element">The element to render</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.MediaLinkElement">
            <summary>
            This handles <c>mediaLinkInline</c> elements in Open XML topics
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.MediaLinkElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.MediaLinkElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.OpenXmlElement">
            <summary>
            This abstract base class is used to create rendered Open XML elements in API and MAML topics
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.OpenXmlElement.WordProcessingML">
            <summary>
            The Word Processing markup language namespace (w)
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.OpenXmlElement.Office">
            <summary>
            The Office namespace (o)
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.OpenXmlElement.Vml">
            <summary>
            The VML namespace (v)
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.OpenXmlElement.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The element name</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.OpenXmlElement.AddAddressBookmark(System.Xml.Linq.XElement,System.String)">
            <summary>
            Add a bookmark for an address attribute
            </summary>
            <param name="content">The content element to which the bookmark is added</param>
            <param name="uniqueId">The unique ID to use for the bookmark</param>
            <remarks>Open XML does not support ID attributes like HTML.  Instead, it renders bookmarks with the
            unique IDs that will be used as the link targets.  The Open XML file builder task will reformat the
            bookmark name and ID to ensure that they are all unique.</remarks>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.ParagraphElement">
            <summary>
            This handles paragraph elements in Open XML output
            </summary>
            <para>Note that unlike HTML, self-closing and empty paragraphs will be rendered in the document and will
            consume space.  However, we can't remove them as it could then combine text into a single paragraph that
            is not intended to be combined.  It is best to let the user sort it out later.  The fix is to wrap the
            text in the paragraph elements and not use self-closing paragraphs.</para>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.ParagraphElement.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.ParagraphElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.StyledParagraphElement">
            <summary>
            This handles elements rendered as paragraphs with a specific style in Open XML output
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.StyledParagraphElement.ParagraphStyle">
            <summary>
            The paragraph style to use
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.StyledParagraphElement.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The element name</param>
            <param name="styleName">The paragraph style to use</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.StyledParagraphElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.SyntaxElement">
            <summary>
            This is used to handle <c>syntax</c> elements in Open XML presentation styles topics
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.SyntaxElement.BaseSourceCodeUrlArgName">
            <summary>
            This read-only property returns the base source code URL transformation argument name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.SyntaxElement.NamespaceAndAssemblyInfoRenderer">
            <summary>
            This is used to get or set the action delegate use to render the namespace and assembly information
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.SyntaxElement.InheritanceHierarchyRenderer">
            <summary>
            This is used to get or set the action delegate use to render the inheritance hierarchy information
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.SyntaxElement.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="baseSourceCodeUrlArgName">The base source code URL transformation argument name to use
            or null if there isn't one.</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.SyntaxElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.SyntaxElement.RenderSyntaxSections(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Render the syntax sections
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="element">The element containing the syntax sections</param>
            <param name="content">The content element to which the sections will be added</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.SyntaxElement.RenderXamlSyntaxBlock(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Render XAML syntax blocks based on the API member type
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="xamlSnippet">The XAML snippet to render</param>
            <param name="content">The content element to which the syntax will be added</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.SyntaxElement.RenderDefaultReturnSection(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <summary>
            Render a default return section for a member without any explicit comments based on the member's
            return value type.
            </summary>
            <param name="transformation">The transformation to use</param>
            <param name="content">The content element to which the section will be added</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.TableCellElement">
            <summary>
            This handles table cell elements based on the topic type
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.TableCellElement.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.TableCellElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.TableElement">
            <summary>
            This handles the <c>table</c> element based on the topic type
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.TableElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.TableElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.TableRowElement">
            <summary>
            This handles table row elements based on the topic type
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.TableRowElement.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.OpenXml.TableRowElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.ParametersElement">
            <summary>
            This is used to handle <c>parameters</c> elements based on the topic type
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.ParametersElement.ParameterStyle">
            <summary>
            This is used to get or set the parameter style for HTML presentation styles
            </summary>
            <value>The default if not set explicitly is "parameter"</value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ParametersElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ParametersElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.PassthroughElement">
            <summary>
            This handles passthrough elements such as HTML elements by writing them out along with any attributes and
            then parsing any child nodes.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.PassthroughElement.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.PassthroughElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.PreliminaryElement">
            <summary>
            This handles the <c>preliminary</c> element
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.PreliminaryElement.PreliminaryContainerElement">
            <summary>
            This is used to get or set the container element that will hold the preliminary text for HTML output
            </summary>
            <value>The default if not set explicitly is <c>span</c></value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.PreliminaryElement.PreliminaryTextStyle">
            <summary>
            This is used to get or set the preliminary text style for HTML output
            </summary>
            <value>The default if not set explicitly is <c>tag is-warning is-medium</c></value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.PreliminaryElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.PreliminaryElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.ProcedureElement">
            <summary>
            This is used to handle general <c>procedure</c> elements in a topic
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ProcedureElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ProcedureElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.RelatedTopicsElement">
            <summary>
            This is used to handle <c>relatedTopics</c> elements in a topic
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.RelatedTopicsElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.RelatedTopicsElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.RelatedTopicsElement.RenderLinkSubsection(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Render the links in the given topic type group to their own subsection
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="content">The parent content element to which the links are rendered</param>
            <param name="titleIncludeItem">The include item name for the title</param>
            <param name="links">The links to render</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.ReturnsElement">
            <summary>
            This is used to handle <c>returns</c> elements
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ReturnsElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ReturnsElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.SectionElement">
            <summary>
            This is used to handle general <c>section</c> elements in a topic
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.SectionElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.SectionElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.SeeElement">
            <summary>
            This handles <c>see</c> and <c>seealso</c> elements
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.SeeElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.SeeElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.SeeElement.RenderApiTopicLink(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.String)">
            <summary>
            Render a link to another API topic
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="element">The element to handle</param>
            <param name="apiMemberId">The member ID to use for the link</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.SeeElement.RenderExternalLink(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement,System.String)">
            <summary>
            Render a link to an external URL
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="element">The element to handle</param>
            <param name="url">The URL for the external link</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.SeeElement.RenderLanguageKeyword(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.String)">
            <summary>
            Render a language keyword
            </summary>
            <param name="transformation">The topic transformation in use</param>
            <param name="keyword">The language keyword to render</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.StepsElement">
            <summary>
            This is used to handle general <c>steps</c> elements in a topic
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.StepsElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.StepsElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.SummaryElement">
            <summary>
            This handles the <c>summary</c> element based on the topic type
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.SummaryElement.SummaryStyle">
            <summary>
            This is used to get or set the summary style for HTML formats
            </summary>
            <value>The default if not set explicitly is "summary"</value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.SummaryElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.SummaryElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.TemplatesElement">
            <summary>
            This is used to handle <c>templates</c> elements
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.TemplatesElement.TemplateParameterStyle">
            <summary>
            This is used to get or set the template parameter style for HTML presentation styles
            </summary>
            <value>The default if not set explicitly is "parameter"</value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.TemplatesElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.TemplatesElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.ThreadsafetyElement">
            <summary>
            This is used to handle <c>threadsafety</c> elements
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ThreadsafetyElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ThreadsafetyElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicType">
            <summary>
            This class is used to contain information about the topic types that can appear in a help file
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicType.UniqueId">
            <summary>
            The unique ID of the topic type
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicType.TopicElementName">
            <summary>
            The topic element name associated with the topic type if any
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicType.ContentType">
            <summary>
            The content type group for the topic type
            </summary>
            <value>This is used to determine the values for the content type topic metadata</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicType.SeeAlsoGroup">
            <summary>
            The See Also group for the topic type
            </summary>
            <value>This is used to determine the group in which the link appears in the See Also topic section</value>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicType.#ctor(System.String,System.String,Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicTypeGroup,Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicTypeGroup)">
            <summary>
            Private constructor
            </summary>
            <param name="uniqueId">The unique ID for the content type</param>
            <param name="topicElementName">The topic element name for the content type if any</param>
            <param name="contentTypeTitle">The content type title</param>
            <param name="seeAlsoGroupTitle">The See Also group title for the content type</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicType.FromUniqueId(System.String)">
            <summary>
            This is used to get the topic type information for the given unique ID
            </summary>
            <param name="uniqueId">The unique ID of the topic type for which to get the information</param>
            <returns>The topic type for the unique ID or null if not found</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicType.FromElementName(System.String)">
            <summary>
            This is used to get the topic type information for the given element name
            </summary>
            <param name="elementName">The element name of the topic type for which to get the information</param>
            <returns>The topic type for the element name or null if not found</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicType.DescriptionForTopicTypeGroup(Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicTypeGroup)">
            <summary>
            This is used to get a description for the given topic type group
            </summary>
            <param name="group">The topic type group for which to get a description</param>
            <returns>The description for the topic type group</returns>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicTypeGroup">
            <summary>
            This enumerated type defines topic type groups
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicTypeGroup.Concepts">
            <summary>
            Concepts
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicTypeGroup.HowTo">
            <summary>
            How To
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicTypeGroup.Tasks">
            <summary>
            Tasks
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicTypeGroup.Reference">
            <summary>
            Reference
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicTypeGroup.Samples">
            <summary>
            Samples
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.Elements.TopicTypeGroup.OtherResources">
            <summary>
            Other Resources
            </summary>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.ValueElement">
            <summary>
            This is used to handle <c>value</c> elements
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ValueElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.ValueElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.Elements.VersionsElement">
            <summary>
            This is used to handle <c>versions</c> elements
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.VersionsElement.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.VersionsElement.Render(Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore,System.Xml.Linq.XElement)">
            <inheritdoc />
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.Elements.VersionsElement.RenderVersionInfo(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            This is used to render the information for each version entry
            </summary>
            <param name="version">The version element</param>
            <param name="content">The content element to which the information is added</param>
            <param name="isMarkdown">True if rendering for markdown, false if not</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.EnumMemberSortOrder">
            <summary>
            This enumerated type defines how enumeration members are sorted
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.EnumMemberSortOrder.Name">
            <summary>
            Sort by name
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.EnumMemberSortOrder.Value">
            <summary>
            Sort by value
            </summary>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.EnumValueFormat">
            <summary>
            This enumerated value defines the enumeration value formats
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.EnumValueFormat.IntegerValue">
            <summary>
            Display as an integer value
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.EnumValueFormat.HexValue">
            <summary>
            Display as a hex value
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.EnumValueFormat.BitFlags">
            <summary>
            Display as bit flags (binary literal)
            </summary>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.LanguageFilterItem">
            <summary>
            This defines the shared content item ID and keyword style values used for the language filter options
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.LanguageFilterItem.SharedContentItemId">
            <summary>
            This read-only property is used to get the shared content item ID to use for the language text
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.LanguageFilterItem.KeywordStyle">
            <summary>
            This read-only property is used to get the keyword style to use for the language filter selection
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.LanguageFilterItem.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sharedContentItemId">The shared content item ID</param>
            <param name="keywordStyle">The keyword style</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.LogoAlignment">
            <summary>
            This enumerated type defines logo alignment values used when the logo is placed above the title
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.LogoAlignment.Left">
            <summary>
            Left align the logo
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.LogoAlignment.Right">
            <summary>
            Right align the logo
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.LogoAlignment.Center">
            <summary>
            Center the logo
            </summary>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.LogoPlacement">
            <summary>
            This enumerated type defines logo placement values
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.LogoPlacement.Left">
            <summary>
            Place the logo to the left of the title
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.LogoPlacement.Right">
            <summary>
            Place the logo to the right of the title
            </summary>
        </member>
        <member name="F:Sandcastle.Core.PresentationStyle.Transformation.LogoPlacement.Above">
            <summary>
            Place the logo above the title
            </summary>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.RenderedSectionEventArgs">
            <summary>
            This event arguments class is used to report when a topic section has been rendered
            </summary>
            <remarks>Note that rendered section events are raised regardless of whether or not any content was
            actually rendered.</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.RenderedSectionEventArgs.Key">
            <summary>
            The topic key
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.RenderedSectionEventArgs.SectionType">
            <summary>
            The section type that was rendered
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.RenderedSectionEventArgs.CustomSectionName">
            <summary>
            If <see cref="P:Sandcastle.Core.PresentationStyle.Transformation.RenderedSectionEventArgs.SectionType"/> is <c>CustomSection</c>, this contains the name of the custom section
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.RenderedSectionEventArgs.#ctor(System.String,Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key">The topic key</param>
            <param name="sectionType">The section type that was rendered</param>
            <param name="customSectionName">The name of the custom section or null if it is a known section type</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.RenderTopicEventArgs">
            <summary>
            This event arguments class is used to report when a topic is starting to be or has finished being
            rendered by the presentation style topic transformation.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.RenderTopicEventArgs.Key">
            <summary>
            The topic key
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.RenderTopicEventArgs.TopicContent">
            <summary>
            The topic content
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.RenderTopicEventArgs.#ctor(System.String,System.Xml.Linq.XDocument)">
            <summary>
            Constructor
            </summary>
            <param name="key">The topic key</param>
            <param name="topicContent">The topic content</param>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore">
            <summary>
            This abstract base class is used to define the settings and common functionality for a specific
            presentation style topic transformation.
            </summary>
            <remarks>This implements the core processing common to all presentation styles.  While it can render
            presentation style neutral elements such as <c>referenceLink</c> and <c>include</c> elements, any
            presentation style specific elements such as HTML elements, Open XML elements, or markdown should be
            rendered by derived classes in the appropriate overridden methods.</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.Key">
            <summary>
            This read-only property returns the topic key
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.IsMamlTopic">
            <summary>
            This read-only property returns true if a MAML topic is being generated, false if an API topic is
            being generated
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.DocumentNode">
            <summary>
            This read-only property returns the root <c>document</c> node for the topic being rendered
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.MetadataNode">
            <summary>
            This read-only property returns the <c>metadata</c> node for the topic being rendered
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.TopicNode">
            <summary>
            This read-only property returns the <c>topic</c> node for the MAML topic being rendered.  This is
            not used for API topics.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ReferenceNode">
            <summary>
            This read-only property returns the <c>reference</c> node for the API topic being rendered.  This is
            not used for MAML topics.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.SyntaxNode">
            <summary>
            This read-only property returns the <c>syntax</c> node for the API topic being rendered.  This is
            not used for MAML topics.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.CommentsNode">
            <summary>
            This read-only property returns the <c>comments</c> node for the API topic being rendered.  This is
            not used for MAML topics.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ApiMember">
            <summary>
            This read-only property returns common API member information for the API topic being rendered.  This
            is not used for MAML topics.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.CurrentElement">
            <summary>
            This is used to get or set the current element to which rendered content is being added
            </summary>
            <value>If changed, you are responsible for restoring the prior value if necessary after completing
            any processing related to the change.</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ResolvePath">
            <summary>
            This read-only property is used to get the function use to resolve a path to a presentation style
            content file of some sort.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.TopicTemplatePath">
            <summary>
            This is used to get or set the topic template path if the presentation style makes use of one
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.IconPath">
            <summary>
            This is used to get or set the path used for icons and other images in the presentation style
            </summary>
            <remarks>Ensure the path is terminated with an appropriate directory separator character</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.StyleSheetPath">
            <summary>
            This is used to get or set the path used for style sheets in the presentation style
            </summary>
            <remarks>Ensure the path is terminated with an appropriate directory separator character</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ScriptPath">
            <summary>
            This is used to get or set the path used for scripts in the presentation style
            </summary>
            <remarks>Ensure the path is terminated with an appropriate directory separator character</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.HasHeaderText">
            <summary>
            This property is used to get or set whether or not all pages should be have the header text item
            inserted into them.
            </summary>
            <value>This will be true if the project's header text property contains a value, false if not</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.IsPreliminaryDocumentation">
            <summary>
            This property is used to get or set whether or not all pages should be marked with a "preliminary
            documentation" warning in the page header.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.Locale">
            <summary>
            This is used to get or set the locale
            </summary>
            <value>If not set, the default is en-US</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.SupportedFormats">
            <summary>
            This read-only property returns the help file formats supported by the presentation style
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.UsesLegacyCodeColorizer">
            <summary>
            This property is used to get or set whether or not the presentation style transformation uses
            the legacy code colorizer.
            </summary>
            <value>The default is false to use the client-side highlighter (highlight.js) or, in cases such as
            the Markdown style, to do no colorization.  If true, the legacy colorizer implemented in the Code
            Block Component will be used.</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.BibliographyDataFile">
            <summary>
            This is used to get or set the path to the bibliography data file for the <c>bibliography</c>
            and <c>cite</c> elements.
            </summary>
            <value>If not set, the bibliography elements will be ignored</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.BibliographyData">
            <summary>
            This read-only property returns the content of the bibliography data file if a
            <see cref="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.BibliographyDataFile" /> has been specified.
            </summary>
            <value>The key is the reference name, the value is the reference element</value>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ApiTopicSections">
            <summary>
            This read-only property returns an enumerable list of the API section handlers in the order that they
            will be rendered
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.LanguageFilter">
            <summary>
            This read-only property returns the language filter items for presentation styles that contain one
            in their topics.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.TransformationArguments">
            <summary>
            This read-only property returns a dictionary used to contain transformation arguments used by the
            presentation style
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.StartupScriptBlocks">
            <summary>
            This read-only property returns an enumerable list of the startup script blocks that have been
            registered.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.StartupScriptBlockItemIds">
            <summary>
            This read-only property returns an enumerable list of the startup script block item IDs that have
            been registered.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.CodeSnippetLanguageConversion">
            <summary>
            This read-only property returns a dictionary containing code snippet language ID conversions
            </summary>
            <remarks>Use this to convert code snippet language IDs not recognized by the transformation's
            code colorizer of choice to a language ID that it does recognize.  The keys are case-insensitive.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.#ctor(Sandcastle.Core.HelpFileFormats,System.Func{System.String,System.String})">
            <summary>
            Constructor
            </summary>
            <param name="supportedFormats">The presentation style's supported help file formats</param>
            <param name="resolvePath">The function used to resolve content file paths for the presentation style</param>
        </member>
        <member name="E:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.UnhandledElement">
            <summary>
            This event is raised to notify the user of an unhandled element
            </summary>
            <remarks>The unhandled element may be incorrectly spelled or may be a custom element for which a new
            handler needs to be added.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.OnUnhandledElement(System.String,System.String)">
            <summary>
            This is used to raise the <see cref="E:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.UnhandledElement"/> event
            </summary>
            <param name="elementName">The unhandled element name</param>
            <param name="parentElementName">The parent element name of the unhandled element</param>
        </member>
        <member name="E:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.SectionRendered">
            <summary>
            This event is raised to notify the user of section having been rendered
            </summary>
            <remarks>This event is raised regardless of whether or not anything was actually rendered for the
            section.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.OnSectionRendered(Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType,System.String)">
            <summary>
            This is used to raise the <see cref="E:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.SectionRendered"/> event
            </summary>
            <param name="sectionName">The section name</param>
            <param name="customName">The name of the custom section if <c>sectionName</c> is <c>Custom</c></param>
        </member>
        <member name="E:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.RenderStarting">
            <summary>
            This event is raised to notify the user that the topic is about to be rendered
            </summary>
            <remarks>When invoked, only the basic page template is present with the metadata and page header
            rendered.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.OnRenderStarting(System.Xml.Linq.XDocument)">
            <summary>
            This is used to raise the <see cref="E:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.RenderStarting"/> event
            </summary>
            <param name="topicContent">The basic topic template</param>
        </member>
        <member name="E:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.RenderCompleted">
            <summary>
            This event is raised to notify the user that the topic has been completely rendered
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.OnRenderCompleted(System.Xml.Linq.XDocument)">
            <summary>
            This is used to raise the <see cref="E:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.RenderCompleted"/> event
            </summary>
            <param name="topicContent">The topic content</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.CreateTransformationArguments">
            <summary>
            This is called to create the transformation arguments that will be used by the transformation
            </summary>
            <remarks>Transformation arguments are used to pass user-defined values for parts of the rendered
            topic such as a logo filename, source code URL, etc.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.CreateLanguageSpecificText">
            <summary>
            This is called to create the language specific text elements that will be used by the transformation
            </summary>
            <remarks>Define the common keywords used in language-specific text.  These will be connected to the
            language filter in the topic and the appropriate text will be shown based on the selected language.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.CreateElementHandlers">
            <summary>
            This is called to create the element handlers that will be used by the transformation
            </summary>
            <remarks>Element handlers are used to render the common MAML and API topic elements.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.CreateApiTopicSectionHandlers">
            <summary>
            This is called to create the API topic section handlers that will be used by the transformation
            </summary>
            <remarks>Unlike MAML topics, API topics are rendered in a fixed order defined by the presentation
            style that may vary based on the topic type (namespace, type, member, overloaded member, etc.).</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.AddElement(Sandcastle.Core.PresentationStyle.Transformation.Elements.Element)">
            <summary>
            Add an element that will be transformed when the topic is rendered
            </summary>
            <param name="element">The element handler</param>
            <exception cref="T:System.ArgumentException">This is thrown if the element name already has a handler</exception>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.AddElements(System.Collections.Generic.IEnumerable{Sandcastle.Core.PresentationStyle.Transformation.Elements.Element})">
            <summary>
            Add a range of elements that will be transformed when the topic is rendered
            </summary>
            <param name="elements">The element handlers</param>
            <exception cref="T:System.ArgumentException">This is thrown if an element name already has a handler</exception>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ReplaceElement(Sandcastle.Core.PresentationStyle.Transformation.Elements.Element)">
            <summary>
            Replace an element handler
            </summary>
            <param name="element">The element handler for the element to replace</param>
            <remarks>If an element handler is not present for the element, it will be added instead</remarks>
            <returns>The element handler that was replaced or null if one did not exist</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ReplaceElements(System.Collections.Generic.IEnumerable{Sandcastle.Core.PresentationStyle.Transformation.Elements.Element})">
            <summary>
            Replace a range of elements
            </summary>
            <param name="elements">The element handlers for the elements to replace.  If an element handler is
            not present for the element, it will be added instead.</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ElementHandlerFor(System.String)">
            <summary>
            This is used to retrieve the current handler for the given element name
            </summary>
            <param name="elementName">The element name for which to get the handler</param>
            <returns>The element handler if found or null if there isn't one</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.AddApiTopicSectionHandler(Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler)">
            <summary>
            Add a new API topic section handler
            </summary>
            <param name="sectionHandler">The API topic section handler to add</param>
            <exception cref="T:System.ArgumentException">This is thrown if a section handler has already been defined for
            the given section.</exception>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.AddApiTopicSectionHandlerRange(System.Collections.Generic.IEnumerable{Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler})">
            <summary>
            Add a range of new API topic section handlers
            </summary>
            <param name="sectionHandlers">An enumerable list of the API topic section handlers to add</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.RemoveApiTopicSectionHandler(Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType,System.String)">
            <summary>
            Remove an API topic section handler
            </summary>
            <param name="sectionType">The section type to remove</param>
            <param name="customSectionName">If the section type is custom, this defines the custom section name</param>
            <returns>The API topic handler that was removed or null if it was not found</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ReplaceApiTopicSectionHandler(Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler)">
            <summary>
            Replace an API topic section handler with a new one
            </summary>
            <param name="sectionHandler">The API topic section handler to add</param>
            <exception cref="T:System.ArgumentException">This is thrown if a section handler has not been defined for
            the given section.</exception>
            <returns>The API topic handler that was replaced</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.InsertApiTopicSectionHandlerBefore(Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler,Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler)">
            <summary>
            Insert an API topic section handler before the given section handler
            </summary>
            <param name="insertBeforeSectionHandler">The API topic section handler before which the given
            handler is inserted.</param>
            <param name="newSectionHandler">The new API topic section handler to insert.</param>
            <remarks>If the section handler already exists, it is removed before inserting it in the new location.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.InsertApiTopicSectionHandlerAfter(Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler,Sandcastle.Core.PresentationStyle.Transformation.Elements.ApiTopicSectionHandler)">
            <summary>
            Insert an API topic section handler after the given section handler
            </summary>
            <param name="insertAfterSectionHandler">The API topic section handler after which the given
            handler is inserted.</param>
            <param name="newSectionHandler">The API topic section handler to insert.</param>
            <remarks>If the section handler already exists, it is removed before inserting it in the new location.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ApiTopicSectionHandlerFor(Sandcastle.Core.PresentationStyle.Transformation.ApiTopicSectionType,System.String)">
            <summary>
            This is used to retrieve the current API topic section handler for the given section
            </summary>
            <param name="sectionType">The section type</param>
            <param name="customSectionName">If the section type is <c>CustomSection</c>, this should refer to the
            custom section name</param>
            <returns>The API topic section handler if found or null if there isn't one</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.AddLanguageSpecificText(Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText)">
            <summary>
            Add a language specific text entry
            </summary>
            <param name="keyword">The language specific text entry for the keyword</param>
            <remarks>Entries will be indexed for each of the given language keywords in the entry</remarks>
            <exception cref="T:System.ArgumentException">This is thrown if an entry already exists for the keyword</exception>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ReplaceLanguageSpecificText(Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText)">
            <summary>
            Replace a language specific text entry
            </summary>
            <param name="keyword">The language specific text entry for the keyword to replace</param>
            <remarks>If an entry is not present for the keyword, it will be added instead</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.AddLanguageSpecificTextRange(System.Collections.Generic.IEnumerable{Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText})">
            <summary>
            Add a range of language specific text entries
            </summary>
            <param name="keywords">The language specific text entries to add</param>
            <remarks>Entries will be indexed for each of the given language keywords in the entry</remarks>
            <exception cref="T:System.ArgumentException">This is thrown if a keyword already has an entry</exception>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ReplaceLanguageSpecificTextRange(System.Collections.Generic.IEnumerable{Sandcastle.Core.PresentationStyle.Transformation.Elements.Html.LanguageSpecificText})">
            <summary>
            Replace a range of language specific text entries
            </summary>
            <param name="keywords">The language specific text entries to replace.  If an entry is not present for
            the keyword, it will be added instead.</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.LanguageSpecificTextFor(System.String)">
            <summary>
            This is used to retrieve the language specific text for a given keyword
            </summary>
            <param name="keyword">The keyword for which to get language specific text</param>
            <returns>The language specific text entry if found for the given keyword or null if there isn't one</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.AddLanguageFilterItems(System.Collections.Generic.IEnumerable{Sandcastle.Core.PresentationStyle.Transformation.LanguageFilterItem})">
            <summary>
            This is used to add the language filter item information for presentation styles that contain a
            language filter in the topics.
            </summary>
            <param name="languageFilterItems">The language filter items</param>
            <remarks>Language filter items with duplicate keyword styles will be ignored</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.AddTransformationArgument(Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument)">
            <summary>
            Add a new transformation argument
            </summary>
            <param name="argument">The transformation argument information</param>
            <exception cref="T:System.ArgumentException">This is thrown if a transformation argument already exists for
            the new argument's name.</exception>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.AddTransformationArgumentRange(System.Collections.Generic.IEnumerable{Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument})">
            <summary>
            Add a range of new transformation arguments
            </summary>
            <param name="arguments">An enumerable list of the transformation arguments to add</param>
            <exception cref="T:System.ArgumentException">This is thrown if a transformation argument already exists for
            any of the new argument names.</exception>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.LoadTemplateFile(System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Load a template file and perform any necessary substitution tag replacements
            </summary>
            <param name="templateFilePath">The template file to load</param>
            <param name="replacementTags">An optional enumerable list of tuples containing the substitution tag
            names and replacement values.</param>
            <returns>A copy of the template XML document with the substitution tags replaced with the given text</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.RegisterStartupScript(System.Int32,System.String)">
            <summary>
            This is used to register a block of script to execute in the <c>$(document).ready()</c> function by
            presentation styles that support script.
            </summary>
            <param name="priority">The priority of the script.  Lower numbers will have higher priority</param>
            <param name="scriptBlock">The script block to execute</param>
            <remarks>Only unique script blocks are registered.  Any subsequent calls to this method with an
            identical script block will ignore the duplicates.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.RegisterStartupScriptItem(System.Int32,System.String)">
            <summary>
            This is used to register a shared content item ID that contains a block of script with localized
            text.  These will be added to a <c>script</c> element at the end of the document body by presentation
            styles that support script.
            </summary>
            <param name="priority">The priority of the script.  Lower numbers will have higher priority</param>
            <param name="scriptBlockItemId">The item ID that contains the script block to execute</param>
            <remarks>Only unique script block IDs are registered.  Any subsequent calls to this method with an
            identical script block ID will ignore the duplicates.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.Render(System.String,System.Xml.Linq.XDocument)">
            <summary>
            This is used to parse the topic data and render the topic output for the presentation style
            </summary>
            <param name="key">The topic key</param>
            <param name="topic">The topic to render</param>
            <returns>The rendered document content</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.RenderTypeReferenceLink(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            This is used to render a reference link based on the given type information
            </summary>
            <param name="content">The content element to which the link is added</param>
            <param name="typeInfo">An element containing the type information for the reference link</param>
            <param name="qualified">True to fully qualify the type, false to show the type name alone</param>
            <remarks>This method will call itself recursively if necessary to render type specializations,
            template parameter types, array types, etc.  This will render language-specific text elements where
            needed.  Non-HTML presentation styles may override this method to obtain the result and then strip
            or replace the language-specific text elements as they see fit.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.RenderTopic">
            <summary>
            Render the topic content based on the topic type
            </summary>
            <returns>The current topic rendered in the presentation style format</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.RenderNode(System.Xml.Linq.XNode)">
            <summary>
            Render the given XML node based on its node type
            </summary>
            <param name="node">The node to render</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.RenderTextNode(System.Xml.Linq.XElement,System.Xml.Linq.XText)">
            <summary>
            This is used to render a text node
            </summary>
            <param name="content">The content element to which the text is added</param>
            <param name="textNode">The text node to render</param>
            <remarks>By default, this just adds the text to the given content element.  Presentation styles can
            override this to provide additional formatting support for text.  For example, Open XML needs to
            normalize whitespace and handle some other conditions.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.RenderChildElements(System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode})">
            <summary>
            This makes the given parent element the current element, renders the list of children to it and then
            resets the current element to the prior current element.
            </summary>
            <param name="parent">The parent element to which the children are rendered</param>
            <param name="children">An enumerable list of child elements to render</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.CreateSection(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a topic section with a title
            </summary>
            <param name="uniqueId">A unique ID that can be used to identify the section</param>
            <param name="localizedTitle">True if <paramref name="title"/> is a localized include item, false if
            it is literal title text.</param>
            <param name="title">The item id if <paramref name="localizedTitle"/> is true, or the literal title
            text if it is false.</param>
            <param name="linkId">An optional link ID for the section.  If there is no title, this will be
            ignored.</param>
            <returns>A tuple containing a reference to the title element if a title was created, null if not,
            and a reference to the content element into which any additional content can be rendered or null if
            it should be rendered into the current topic element.  Both elements should be added to the topic if
            created.</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.CreateSubsection(System.Boolean,System.String)">
            <summary>
            Create a topic subsection with a title
            </summary>
            <param name="localizedTitle">True if <paramref name="title"/> is a localized include item, false if
            it is literal title text.</param>
            <param name="title">The item id if <paramref name="localizedTitle"/> is true, or the literal title
            text if it is false.</param>
            <returns>A tuple containing a reference to the title element if a title was created, null if not,
            and a reference to the content element into which any additional content can be rendered or null
            if it should be rendered into the current topic element.  Both elements should be added to the topic
            if created.</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.MamlTopicTitle">
            <summary>
            Get the title for a MAML topic
            </summary>
            <returns>The XML content representing the current topic's title</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ApiTopicTitle(System.Boolean,System.Boolean)">
            <summary>
            Get the title for an API topic
            </summary>
            <param name="qualifyMembers">True to qualify members with their namespace, false if not</param>
            <param name="plainText">True if it should be in plain text (metadata and table of contents title) or
            decorated with language-specific text elements (page title).</param>
            <returns>The XML content representing the current topic's title</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ApiTopicShortNamePlainText(System.Boolean)">
            <summary>
            Get the short type/member name for an API topic in plain text.  This is used for metadata values and
            the table of contents title.
            </summary>
            <param name="qualifyMembers">True to qualify members with their namespace, false if not</param>
            <returns>An XML element representing the current topic's type/member name in plain text</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ApiTopicShortNameDecorated">
            <summary>
            Get the short type/member name for an API topic decorated with language-specific text.  This is used
            for page title.
            </summary>
            <returns>An enumerable list of XML elements representing the current topic's type/member name</returns>
            <remarks>This will render language-specific text elements where needed.  Non-HTML presentation styles
            may override this method to obtain the result and then strip or replace the language-specific text
            elements as they see fit.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ApiTopicTocTitleSimple">
            <summary>
            Get the simple table of contents title for an API topic
            </summary>
            <returns>The XML content representing the current topic's simple table of contents title.  For
            types and members, this will be the type/member name alone.  For list topics, it will be the category
            name alone.</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ApiTopicOperatorTypes(System.Boolean)">
            <summary>
            Get parameter and return types for an operator API member topic (e.g. <c>Int32</c> to <c>Decimal</c>)
            </summary>
            <param name="plainText">True if it should be in plain text (metadata and table of contents title) or
            decorated with language-specific text elements (page title).</param>
            <returns>An enumerable list of one or more XML nodes representing the parameter and return types</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ApiTopicParameterTypes(System.Boolean)">
            <summary>
            Get parameter types for an API member topic in plain text format
            </summary>
            <param name="plainText">True if it should be in plain text (metadata and table of contents title) or
            decorated with language-specific text elements (page title).</param>
            <returns>An enumerable list of one or more XML nodes representing the parameter types or null if
            there aren't any.</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ApiTypeNamePlainText(System.Text.StringBuilder,System.Xml.Linq.XElement)">
            <summary>
            This is used to get a type name in plain text based on the given type information
            </summary>
            <param name="memberName">A string builder to which the name elements are added</param>
            <param name="typeInfo">An element containing the type information for the reference link</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ApiTypeNameDecorated(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            This is used to get a type name in decorated with language-specific text elements based on the given
            type information.
            </summary>
            <param name="memberName">An XML element to which the name elements are added</param>
            <param name="typeInfo">An element containing the type information for the reference link</param>
            <remarks>This method will call itself recursively if necessary to render type specializations,
            template parameter types, array types, etc.  This will render language-specific text elements where
            needed.  Non-HTML presentation styles may override this method to obtain the result and then strip
            or replace the language-specific text elements as they see fit.</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.ApiTypeNameWithTemplateCount(System.Xml.Linq.XElement)">
            <summary>
            This is used to get the type name with the template count if any (e.g. TypeName`2)
            </summary>
            <param name="typeInfo">The element containing the type information</param>
            <returns>The type name with the template count if any</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.LanguageSpecificApiNames(System.Xml.Linq.XElement)">
            <summary>
            This returns an enumerable list of plain text API member names with language-specific text for use
            in help index entries.
            </summary>
            <param name="typeInfo">The element containing the type information</param>
            <returns>One or more versions of the API member name.  If there is no language-specific text,
            a single entry is returned.  If language-specific text is present, a copy is returned for C# and
            another for Visual Basic.</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationCore.LanguageIdFor(System.String)">
            <summary>
            This is used to get the language ID for the given language from a syntax section or code example
            </summary>
            <param name="codeLanguage">The code language for which to get the ID</param>
            <returns>The language ID if it could be determined or the code language if not or it belongs to
            a syntax generator.</returns>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationExtensions">
            <summary>
            This contains various extension and utility methods for presentation style transformations
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationExtensions.ToIndent(System.Int32)">
            <summary>
            This is used to convert the given size to an indent consisting of two non-breaking spaces for each
            indent level.
            </summary>
            <param name="size">The indent size (zero for no indent)</param>
            <returns>A string containing two non-breaking spaces for each indent level</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationExtensions.RemoveNamespaces(System.Xml.Linq.XElement)">
            <summary>
            Remove namespaces from an element and all of its descendants including attributes
            </summary>
            <param name="element">The element from which to remove namespaces</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationExtensions.NormalizeWhiteSpace(System.String)">
            <summary>
            Normalize whitespace in a string by replacing consecutive runs of whitespace with a single space
            and removing leading and trailing whitespace.
            </summary>
            <param name="text">The text to normalize</param>
            <returns>The normalized string</returns>
            <remarks>This is based on the normalize-space() XSLT function implementation in the .NET Framework</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationExtensions.InsertWordBreakOpportunities(System.String)">
            <summary>
            Insert word break opportunities into HTML text to allow better word wrapping when the text container
            is narrow like the Table of Contents pane.
            </summary>
            <param name="text">The text into which word break markers will be inserted</param>
            <returns>An enumerable list of the text parts and word break elements</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationExtensions.GenerateUniqueId(System.Xml.Linq.XNode)">
            <summary>
            This is used to generate a unique ID for an XML node
            </summary>
            <param name="node">The node for which to generate a unique ID</param>
            <returns>This is loosely based on the generate-id() XSLT function implementation in the .NET Framework</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationExtensions.PrecedingSiblings(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Return all preceding sibling elements that optionally match the given element's name
            </summary>
            <param name="element">The starting element</param>
            <param name="name">The element name to match or null for all preceding siblings</param>
            <returns>An enumerable list of the preceding sibling elements optionally limited to those with a
            matching name</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationExtensions.FollowingSiblings(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Return all following sibling elements that optionally match the given element's name
            </summary>
            <param name="element">The starting element</param>
            <param name="name">The element name to match or null for all preceding siblings</param>
            <returns>An enumerable list of the following sibling elements optionally limited to those with a
            matching name</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationExtensions.AttributeOfType(System.Xml.Linq.XElement,System.String)">
            <summary>
            This is used to retrieve the first attribute of the given type from an API element's
            <c>attributes</c> node.
            </summary>
            <param name="element">The element containing the attribute information</param>
            <param name="attributeTypeName">The fully qualified type name of the attribute.  The "T:" prefix will
            be added if not specified.</param>
            <returns>The first attribute element for the given type if found or null if not</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationExtensions.FormatSignedEnumValue(System.String,Sandcastle.Core.PresentationStyle.Transformation.EnumValueFormat,System.Int32,System.Int32)">
            <summary>
            Format a signed enumeration value using the given options
            </summary>
            <param name="enumValue">The value to format</param>
            <param name="format">The format</param>
            <param name="minWidth">The minimum width for hex and bit flag values</param>
            <param name="separatorGroupSize">The separator group size (4 or 8) or zero for no separators</param>
            <returns>The formatted enumeration value</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationExtensions.FormatUnsignedEnumValue(System.String,Sandcastle.Core.PresentationStyle.Transformation.EnumValueFormat,System.Int32,System.Int32)">
            <summary>
            Format an unsigned enumeration value using the given options
            </summary>
            <param name="enumValue">The value to format</param>
            <param name="format">The format</param>
            <param name="minWidth">The minimum width for hex and bit flag values</param>
            <param name="separatorGroupSize">The separator group size (4 or 8) or zero for no separators</param>
            <returns>The formatted enumeration value</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TopicTransformationExtensions.ToBoolean(System.Xml.Linq.XAttribute)">
            <summary>
            This converts an attribute value to a Boolean value.  If not present, blank, or invalid, it
            returns false.
            </summary>
            <param name="attribute">The attribute to convert</param>
            <returns>The attribute value if it is a Boolean or false if not</returns>
            <remarks>Explicit casting of an attribute to <c>bool</c> or <c>bool?</c> works but if the value is
            invalid or blank, the cast throws an exception.  This will return false in those cases too.</remarks>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument">
            <summary>
            This class is used to contain transformation argument values
            </summary>
            <remarks>These are modified using any values stored in the help file builder project at build time</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.Key">
            <summary>
            This read-only property returns the argument key
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.IsForConceptualBuild">
            <summary>
            This read-only property returns whether or not the argument applies to conceptual builds
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.IsForReferenceBuild">
            <summary>
            This read-only property returns whether or not the argument applies to reference builds
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.Description">
            <summary>
            This read-only property returns a description of the argument
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.Value">
            <summary>
            This is used to get or set the argument's value for simple arguments
            </summary>
            <remarks>If set to a non-null value, the value of the <see cref="P:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.Content"/> property is ignored.
            This property will take precedence if both are set.</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.Content">
            <summary>
            This is used to get or set the argument's content for complex arguments
            </summary>
            <remarks>If set to a non-null value, the value of the <see cref="P:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.Value"/> property is ignored.  The
            <c>Value</c> property takes precedence if both are set.  The root element name is not
            relevant.  Only the content is significant and will be used.</remarks>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.DefaultValue">
            <summary>
            The default value if one was specified
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.DefaultContent">
            <summary>
            The default content if any was specified
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.#ctor(Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument)">
            <summary>
            Private copy constructor
            </summary>
            <param name="clone">The transformation argument to clone</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.#ctor(System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key">The transformation argument key name</param>
            <param name="isForConceptualBuild">True if used in conceptual builds, false if not</param>
            <param name="isForReferenceBuild">True if used in reference builds, false if not</param>
            <param name="value">The default value of the argument</param>
            <param name="description">A description of the transformation argument</param>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.#ctor(System.String,System.Boolean,System.Boolean,System.String,System.Xml.Linq.XElement)">
            <summary>
            Constructor
            </summary>
            <param name="key">The transformation argument key name</param>
            <param name="isForConceptualBuild">True if used in conceptual builds, false if not</param>
            <param name="isForReferenceBuild">True if used in reference builds, false if not</param>
            <param name="description">A description of the transformation argument</param>
            <param name="content">The default content of the argument</param>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructor
            </summary>
            <param name="argument">The XML element containing the transform component argument settings</param>
            <remarks>This is used by designers to create arguments from serialized project settings</remarks>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.Clone">
            <summary>
            This is used to clone a transformation argument
            </summary>
            <returns>A clone of the current transformation argument</returns>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.TransformationArgument.ToXml">
            <summary>
            This is used to convert the transformation argument to an XML element for storing in a help file
            builder project.
            </summary>
            <returns>The transformation argument key and value as an XML element</returns>
        </member>
        <member name="T:Sandcastle.Core.PresentationStyle.Transformation.UnhandledElementEventArgs">
            <summary>
            This event arguments class is used to report unhandled elements found while transforming a presentation
            style topic.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.UnhandledElementEventArgs.Key">
            <summary>
            The topic key
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.UnhandledElementEventArgs.ElementName">
            <summary>
            The unhandled element name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.PresentationStyle.Transformation.UnhandledElementEventArgs.ParentElementName">
            <summary>
            The parent element name of the unhandled element
            </summary>
        </member>
        <member name="M:Sandcastle.Core.PresentationStyle.Transformation.UnhandledElementEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key">The topic key</param>
            <param name="elementName">The unhandled element name</param>
            <param name="parentElementName">The parent element name of the unhandled element</param>
        </member>
        <member name="T:Sandcastle.Core.Reflection.ApiAssemblyProperties">
            <summary>
            This is used to contain information about an API assembly entry in a reflection information file
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiAssemblyProperties.AssemblyName">
            <summary>
            This read-only property returns the assembly name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiAssemblyProperties.Version">
            <summary>
            This read-only property returns the assembly version
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiAssemblyProperties.AllowsPartiallyTrustedCallers">
            <summary>
            This read-only property returns whether or not the assembly allows partially trusted callers
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ApiAssemblyProperties.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructor
            </summary>
            <param name="assemblyInfo">The XML element containing the assembly properties</param>
        </member>
        <member name="T:Sandcastle.Core.Reflection.ApiMember">
            <summary>
            This is used to contain information about an API member entry in a reflection information file
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.MemberId">
            <summary>
            This read-only property returns the full API member ID including its prefix
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.MemberIdWithoutPrefix">
            <summary>
            This read-only property returns the API member ID excluding the leading prefix
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.MemberIdWithoutParameters">
            <summary>
            This read-only property returns the API member ID excluding the parameters (methods only)
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.Name">
            <summary>
            This read-only property returns the member name without the namespace or parameters
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.ApiGroup">
            <summary>
            This read-only property returns the member's API group
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.ApiSubgroup">
            <summary>
            This read-only property returns the member's API subgroup
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.ApiSubSubgroup">
            <summary>
            This read-only property returns the member's API sub-subgroup
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.ApiTopicGroup">
            <summary>
            This read-only property returns the API topic group
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.ApiTopicSubgroup">
            <summary>
            This read-only property returns the API topic subgroup
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.ApiTopicSubSubgroup">
            <summary>
            This read-only property returns the API topic subgroup
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.TopicName">
            <summary>
            This read-only property returns the member's topic name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.TopicEiiName">
            <summary>
            This read-only property returns the member's topic name for explicit interface implementations
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.TopicGroup">
            <summary>
            This read-only property returns the member's topic group
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.TopicSubgroup">
            <summary>
            This read-only property returns the member's topic subgroup
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.TopicSubSubgroup">
            <summary>
            This read-only property returns the member's topic sub-subgroup
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.TypeTopicId">
            <summary>
            This read-only property returns the member's type topic ID
            </summary>
            <remarks>This appears on member list topics</remarks>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.TypeApiSubgroup">
            <summary>
            This read-only property returns the member's type API subgroup
            </summary>
            <remarks>This appears on member list topics</remarks>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.TopicFilename">
            <summary>
            This read-only property returns the topic filename
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.OverloadTopicId">
            <summary>
            This read-only property returns the overload topic ID if the member is overloaded
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.ParameterCount">
            <summary>
            This read-only property is used to get the parameter count for methods
            </summary>
            <remarks>This is used for sorting overload sets</remarks>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.FirstParameterTypeName">
            <summary>
            This read-only property is used to get the type of the first parameter
            </summary>
            <remarks>This is used for sorting overload sets</remarks>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.IsExplicitlyImplemented">
            <summary>
            This read-only property returns whether or not the member is an explicit interface member implementation
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.ImplementedType">
            <summary>
            This read-only property is used to get the type of the member if explicitly implemented
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.ChildElements">
            <summary>
            This read-only property returns an enumerable list of child element IDs for those topics that have them
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ApiMember.Node">
            <summary>
            The raw XML for the API entry
            </summary>
            <remarks>This is only used when updating the document model</remarks>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ApiMember.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="apiMember">The XML element containing the reflection information for the API member</param>
            <param name="key">An optional key to use as the member ID if the API member element does not contain it</param>
        </member>
        <member name="T:Sandcastle.Core.Reflection.ApiMemberGroup">
            <summary>
            This enumerated type represents the groups and subgroups to which an API member can belong
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.None">
            <summary>
            Not specified
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Unknown">
            <summary>
            An unknown value was encountered
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Root">
            <summary>
            Root namespace container (R:)
            </summary>
            <remarks>There will only be one of these if present</remarks>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.RootGroup">
            <summary>
            Root group namespace container (G:)
            </summary>
            <remarks>There will only be one of these if present</remarks>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Namespace">
            <summary>
            A namespace (N:NamespaceName)
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.NamespaceGroup">
            <summary>
            A namespace group (G:NamespaceGroupName)
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Type">
            <summary>
            A type
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Member">
            <summary>
            A type member
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Class">
            <summary>
            A class
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Structure">
            <summary>
            A structure
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Interface">
            <summary>
            An interface
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Enumeration">
            <summary>
            An enumeration
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Constructor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Property">
            <summary>
            A property
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Method">
            <summary>
            A method
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Event">
            <summary>
            An event
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Delegate">
            <summary>
            A delegate
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Field">
            <summary>
            A field
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Operator">
            <summary>
            An operator
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Extension">
            <summary>
            An extension method
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.AttachedProperty">
            <summary>
            An attached property
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.AttachedEvent">
            <summary>
            An attached event
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.List">
            <summary>
            A member list topic
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Api">
            <summary>
            An API member
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Properties">
            <summary>
            A properties list topic
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Methods">
            <summary>
            A methods list topic
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Overload">
            <summary>
            An overloads list topic
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Operators">
            <summary>
            An operators list topic
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Events">
            <summary>
            An events list topic
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.Fields">
            <summary>
            A fields list topic
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.AttachedProperties">
            <summary>
            An attached properties list topic
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.AttachedEvents">
            <summary>
            An attached events list topic
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.ApiMemberGroup.ExplicitInterfaceImplementation">
            <summary>
            Explicit interface implementation.  This one is just for classifying members when rendering member
            lists.
            </summary>
        </member>
        <member name="T:Sandcastle.Core.Reflection.AssemblyDetails">
            <summary>
            This class is used to hold the details for an assembly
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.AssemblyDetails.Filename">
            <summary>
            This read-only property returns the assembly filename
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.AssemblyDetails.Name">
            <summary>
            This read-only property returns the assembly name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.AssemblyDetails.Version">
            <summary>
            This read-only property is used to get the version for the assembly
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.AssemblyDetails.Culture">
            <summary>
            This read-only property is used to get the culture for the assembly
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.AssemblyDetails.PublicKeyToken">
            <summary>
            This read-only property returns the public key token for the assembly
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.AssemblyDetails.IsIncluded">
            <summary>
            This is used to get or set whether or not to include the assembly
            </summary>
            <remarks>Certain assemblies cannot be parsed or do not contain any useful information.  This can
            be set to false to exclude them from being processed.</remarks>
        </member>
        <member name="P:Sandcastle.Core.Reflection.AssemblyDetails.Description">
            <summary>
            This read-only property returns the assembly description which is a combination of the name,
            version, culture, and public key token.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyDetails.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="E:Sandcastle.Core.Reflection.AssemblyDetails.PropertyChanged">
            <summary>
            The property changed event
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyDetails.OnPropertyChanged(System.String)">
            <summary>
            This raises the <see cref="E:Sandcastle.Core.Reflection.AssemblyDetails.PropertyChanged"/> event
            </summary>
            <param name="propertyName">The property name that changed</param>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyDetails.FromAssemblyName(System.Reflection.AssemblyName)">
            <summary>
            This is used to create an assembly details instance from an assembly name
            </summary>
            <param name="name">The assembly name information</param>
            <returns>The new assembly details item</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyDetails.FromXml(System.String,System.Xml.Linq.XElement)">
            <summary>
            This is used to create an assembly details instance from an XML element
            </summary>
            <param name="path">The path to the assembly</param>
            <param name="details">The XML element containing the details</param>
            <returns>The new assembly details item</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyDetails.ToXml(System.String)">
            <summary>
            This is used to convert the assembly detail to an XML element
            </summary>
            <param name="basePath">The base path for the assembly</param>
            <returns>The assembly details as an XML element</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyDetails.ToString">
            <summary>
            This is overridden to convert the assembly details to a string in the strong name format
            </summary>
            <returns>The assembly details as a strong name string</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyDetails.GetHashCode">
            <summary>
            This is used to return a hash code for the assembly details in string format
            </summary>
            <returns>The hash code for the assembly details</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyDetails.Equals(System.Object)">
            <summary>
            This is overridden to allow proper comparison of assembly detail objects
            </summary>
            <param name="obj">The object to which this instance is compared</param>
            <returns>Returns true if the object equals this instance, false if it does not</returns>
        </member>
        <member name="T:Sandcastle.Core.Reflection.AssemblyLocation">
            <summary>
            This class defines the settings for a specific assembly location
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.AssemblyLocation.StoredPath">
            <summary>
            This is used to get or set the path to the assembly location
            </summary>
            <value>The path may contain environment variable references</value>
            <remarks>When the stored path is changed, the set of assemblies in it is updated as well</remarks>
        </member>
        <member name="P:Sandcastle.Core.Reflection.AssemblyLocation.Path">
            <summary>
            This read-only property returns the actual path to the assembly location
            </summary>
            <remarks>This returns the path with any environment variable references replaced with the actual
            path elements.</remarks>
        </member>
        <member name="P:Sandcastle.Core.Reflection.AssemblyLocation.IsCoreLocation">
            <summary>
            This read-only property is used to determine if this entry represents a core framework location
            </summary>
            <value>True if it is the core location, false if not</value>
            <remarks>The core location is determined by searching for <c>mscorlib</c> in the assembly set</remarks>
        </member>
        <member name="P:Sandcastle.Core.Reflection.AssemblyLocation.AllAssemblies">
            <summary>
            This read-only property returns a bindable list of all assembly details for this location
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.AssemblyLocation.IncludedAssemblies">
            <summary>
            This read-only property returns an enumerable list of only the included assembly details for this
            location.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyLocation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyLocation.#ctor(System.String)">
            <summary>
            Private constructor
            </summary>
            <param name="storedPath">The stored path to use</param>
        </member>
        <member name="E:Sandcastle.Core.Reflection.AssemblyLocation.PropertyChanged">
            <summary>
            The property changed event
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyLocation.OnPropertyChanged(System.String)">
            <summary>
            This raises the <see cref="E:Sandcastle.Core.Reflection.AssemblyLocation.PropertyChanged"/> event
            </summary>
            <param name="propertyName">The property name that changed</param>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyLocation.FromXml(System.Xml.Linq.XElement)">
            <summary>
            This is used to load the settings for an assembly location from an XML element
            </summary>
            <param name="location">The XML element containing the settings</param>
            <returns>The new assembly location item</returns>
            <remarks>If the location element is empty, the assembly details will be created by scanning the
            location for assemblies.</remarks>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyLocation.ToXml">
            <summary>
            This is used to convert the assembly location to an XML element
            </summary>
            <returns>The assembly location as an XML element</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.AssemblyLocation.DetermineAssemblyDetails(System.Boolean)">
            <summary>
            This can be used to load an empty location with information about the assemblies it contains
            </summary>
            <param name="clearAndRefresh">True to clear and refresh all file information or false to only remove
            assemblies that no longer exist and add new assemblies.</param>
        </member>
        <member name="T:Sandcastle.Core.Reflection.PlatformType">
            <summary>
            This class holds a set of constants used to define the various .NET platform types
            </summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.PlatformType.DotNet">
            <summary>.NET 5.0 or later</summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.PlatformType.DotNetCore">
            <summary>.NET Core (Windows Store Apps) Framework</summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.PlatformType.DotNetCoreApp">
            <summary>.NET Core Application</summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.PlatformType.DotNetFramework">
            <summary>.NET Framework</summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.PlatformType.DotNetMicroFramework">
            <summary>.NET Micro Framework</summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.PlatformType.DotNetPortable">
            <summary>.NET Portable Library Framework</summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.PlatformType.DotNetStandard">
            <summary>.NET Standard Framework</summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.PlatformType.Silverlight">
            <summary>Silverlight Framework</summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.PlatformType.WindowsPhone">
            <summary>Windows Phone Framework</summary>
        </member>
        <member name="F:Sandcastle.Core.Reflection.PlatformType.WindowsPhoneApp">
            <summary>Windows Phone Store Apps Framework</summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.PlatformType.PlatformTypes">
            <summary>
            This read-only property returns an enumerable list of the valid platform types
            </summary>
            <remarks>.NETCoreApp is not returned.  It will be redirected to one of the other types.</remarks>
        </member>
        <member name="M:Sandcastle.Core.Reflection.PlatformType.PlatformsAreCompatible(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Version}})">
            <summary>
            This can be used to determine if the given set of platform types are compatible with each other for
            documentation purposes.
            </summary>
            <param name="platforms">An enumerable list of platform types</param>
            <returns>True if they are compatible, false if not</returns>
            <remarks>In general, platforms that have all of their types in mscorlib or netstandard are compatible
            but you can't mix both.  All platforms that redirect their types to System.Runtime and other
            assemblies are also typically compatible.  Mixing the sets or any combination of other frameworks
            is not compatible.</remarks>
        </member>
        <member name="T:Sandcastle.Core.Reflection.ReflectionDataSet">
            <summary>
            This class contains information used to obtain reflection data and comments for a specific set of
            assemblies.
            </summary>
        </member>
        <member name="T:Sandcastle.Core.Reflection.ReflectionDataSet.StringWrapper">
            <summary>
            This is used to create a bindable, editable list of string values
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.StringWrapper.Value">
            <summary>
            The string value
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.StringWrapper.op_Implicit(Sandcastle.Core.Reflection.ReflectionDataSet.StringWrapper)~System.String">
            <summary>
            This is used to handle an implicit conversion from a <see cref="T:Sandcastle.Core.Reflection.ReflectionDataSet.StringWrapper"/> object to a string
            </summary>
            <param name="wrapper">The <see cref="T:Sandcastle.Core.Reflection.ReflectionDataSet.StringWrapper"/> to convert</param>
            <returns>The value of the given wrapper as a string</returns>
        </member>
        <member name="T:Sandcastle.Core.Reflection.ReflectionDataSet.BindingRedirection">
            <summary>
            This class is used to edit binding redirection settings
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.BindingRedirection.Name">
            <summary>
            The assembly name
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.BindingRedirection.Culture">
            <summary>
            The assembly culture (optional)
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.BindingRedirection.PublicKeyToken">
            <summary>
            The public key token
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.BindingRedirection.OldVersion">
            <summary>
            The old version
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.BindingRedirection.NewVersion">
            <summary>
            The new version
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.BindingRedirection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.BindingRedirection.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Create an instance from an XML element
            </summary>
            <param name="redirection">The binding redirection settings</param>
            <returns>The binding redirection settings created from the XML element</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.BindingRedirection.ToXml">
            <summary>
            This is used to convert the binding redirection to an XML element
            </summary>
            <returns>The binding redirection as an XML element</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.BindingRedirection.ToBindingRedirectionElement">
            <summary>
            This is used to convert the binding redirection entry to an MRefBuilder configuration file
            assembly binding redirection element.
            </summary>
            <returns>The binding redirection as an MRefBuilder configuration element</returns>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.Filename">
            <summary>
            This is used to get or set the filename
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.Platform">
            <summary>
            This is used to get or set the platform associated with the reflection data set
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.Version">
            <summary>
            This is used to get or set the version number associated with the reflection data set if applicable
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.Title">
            <summary>
            This is used to get or set the reflection data set title
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.Notes">
            <summary>
            This is used to get or set notes about this reflection data set
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.AllSystemTypesRedirected">
            <summary>
            This is used to get or set whether or not all <c>System</c> types are redirected to other assemblies
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.IsCoreFramework">
            <summary>
            This read-only property is used to determine if this entry represents a core framework
            </summary>
            <value>True if it is the core framework, false if not</value>
            <remarks>The core location is determined by searching for <c>mscorlib</c>, <c>netstandard</c>, or
            <c>System.Runtime</c> in the assembly set.  If the platform type is .NET Standard it is automatically
            considered to be a core framework for backward compatibility with the data set that did not contain
            any assembly information.</remarks>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.CoreFrameworkLocation">
            <summary>
            This read-only property is used to get the core framework location if there is one
            </summary>
            <value>The core framework location or null if there isn't one</value>
            <remarks>The core location is determined by searching for <c>mscorlib</c> in the assembly set</remarks>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.AssemblyLocations">
            <summary>
            This read-only property returns a bindable list of assembly locations
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.IgnoredNamespaces">
            <summary>
            This read-only property returns a bindable list of ignored namespaces used for building the
            reflection data.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.IgnoredUnresolved">
            <summary>
            This read-only property returns a bindable list of ignored unresolved assembly identities used for
            building the reflection data.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.BindingRedirections">
            <summary>
            This read-only property returns a bindable list of binding redirections used for building the
            reflection data.
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.IsPresent">
            <summary>
            This read-only property can be used to determine if the reflection data set's core assemblies are
            present on the current system
            </summary>
            <returns>True if the core assembly folder exists and contains the first assembly, false if not.  If
            the first assembly is present, it is assumed that all of them are.</returns>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSet.IncludedAssemblies">
            <summary>
            This read-only property returns an enumerable list of all included assemblies in the reflection data
            set.
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.#ctor(System.String)">
            <summary>
            File constructor
            </summary>
            <param name="filename">The filename from which to load the reflection data set information</param>
        </member>
        <member name="E:Sandcastle.Core.Reflection.ReflectionDataSet.PropertyChanged">
            <summary>
            The property changed event
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.OnPropertyChanged(System.String)">
            <summary>
            This raises the <see cref="E:Sandcastle.Core.Reflection.ReflectionDataSet.PropertyChanged"/> event
            </summary>
            <param name="propertyName">The property name that changed</param>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.Save">
            <summary>
            This is used to save the reflection data set information to an XML file
            </summary>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.IgnoreIfUnresolvedConfiguration">
            <summary>
            This is used to return the <c>ignoreIfUnresolved</c> configuration entries for the MRefBuilder
            configuration file.
            </summary>
            <returns>The configuration entries</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.BindingRedirectionConfiguration">
            <summary>
            This is used to return the <c>assemblyBinding</c> configuration entries for the MRefBuilder
            configuration file.
            </summary>
            <returns>The configuration entries</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.IgnoredNamespacesConfiguration">
            <summary>
            This is used to return the API filter <c>namespace</c> configuration entries for the MRefBuilder
            configuration file.
            </summary>
            <returns>The configuration entries</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.CommentsFileLocations(System.Globalization.CultureInfo)">
            <summary>
            This is used to return an enumerable list of comments file locations
            </summary>
            <param name="language">An optional language to use when searching for XML comments files, or
            null to use the current language.</param>
            <returns>An enumerable list of file paths to search for XML comments files</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.CultureSpecificCommentsFileFolder(Sandcastle.Core.Reflection.AssemblyLocation,System.Globalization.CultureInfo)">
            <summary>
            This is used to see if any comments files exist in a culture-specific framework location folder
            </summary>
            <param name="location">The framework location</param>
            <param name="language">The language used to check for a culture-specific folder</param>
            <returns>True if files were</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.ContainsAssembly(System.String)">
            <summary>
            This is used to see if the framework contains an assembly that uses the specified name
            </summary>
            <param name="assemblyName">The assembly name without a path or extension or a strong name value.
            If a strong name value is specified, a "starts with" comparison on the description is used to see if
            the assembly is present in the framework.  This allows for matches on strong names with processor
            architecture specified which we don't have.  If only a name is given, just the name is compared.
            Comparisons are case-insensitive.</param>
            <returns>True if the framework contains the named assembly, false if not.</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.FindAssembly(System.String)">
            <summary>
            This is used to find an assembly by name
            </summary>
            <param name="assemblyName">The assembly name without a path or extension or a strong name value.
            If a strong name value is specified, a "starts with" comparison on the description is used to see if
            the assembly is present in the framework.  This allows for matches on strong names with processor
            architecture specified which we don't have.  If only a name is given, just the name is compared.
            Comparisons are case-insensitive.</param>
            <returns>The assembly if found or null if not found</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.KeepReferenceAssembly(System.String)">
            <summary>
            This is used to see if a reference assembly should be kept when building reflection data
            </summary>
            <param name="assemblyName">The assembly name without a path or extension or a strong name value.
            If a strong name value is specified, a "starts with" comparison on the description is used to see if
            the assembly is present in the framework.  This allows for matches on strong names with processor
            architecture specified which we don't have.  If only a name is given, just the name is compared.
            Comparisons are case-insensitive.</param>
            <returns>True if the reference assembly should be kept, false if not.</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSet.GetReferencedNamespaces(System.Globalization.CultureInfo,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This is used to get an enumerable list of unique namespaces referenced in the XML comments files of
            the given set of namespaces.
            </summary>
            <param name="language">The language to use when locating the XML comments files</param>
            <param name="searchNamespaces">An enumerable list of namespaces to search</param>
            <param name="validNamespaces">An enumerable list of valid namespaces</param>
            <returns>An enumerable list of unique namespaces in the related XML comments files</returns>
        </member>
        <member name="T:Sandcastle.Core.Reflection.ReflectionDataSetDictionary">
            <summary>
            This dictionary contains reflection data settings for the various .NET Framework platforms and versions
            </summary>
        </member>
        <member name="P:Sandcastle.Core.Reflection.ReflectionDataSetDictionary.DefaultFrameworkTitle">
            <summary>
            This read-only property is used to get the title of the default framework version to use
            </summary>
            <remarks>The default is the .NET Framework 4.7.2</remarks>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSetDictionary.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="componentLocations">An optional enumerable list of additional component locations to
            search for reflection data set files.</param>
            <remarks>Keys are case-insensitive</remarks>
            <remarks>The following folders are searched in the following order.  If the given folder has not been
            specified or does not exist, it is ignored.
            
            <list type="number">
                <item><c>SHFBROOT</c> - The root Sandcastle Help File Builder installation folder and its
            subfolders.  This allows for XCOPY deployments that keep everything together.</item>
                <item>Common application data folder - The help file builder's common application data folder
            where third-party build components are typically installed.</item>
                <item>The enumerable list of additional folders - This is typically the current project's
            <c>ComponentPath</c> folder and the current project's folder.  This allows for project-specific
            reflection data files.  If the project's <c>ComponentPath</c> property is set, that folder is
            searched first and then the project's folder is searched.</item>
            </list>
            
            All folders and their subfolders are search recursively for reflection data files (*.reflection).
            There may be duplicate titles across the files found.  If duplicates are found, the last one seen is
            used.  As such, reflection data files in a folder with a later search precedence can override
            copies in folders earlier in the search order.</remarks>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSetDictionary.CoreFrameworkByTitle(System.String,System.Boolean)">
            <summary>
            This is used to find the first core framework matching the specified title or the next highest
            version if found but not installed if redirection is requested.
            </summary>
            <param name="title">The title to find</param>
            <param name="withRedirect">True to redirect to the next highest version that is installed if the
            requested title is not installed or false to return the exact match even if not present.</param>
            <returns>The framework settings if found or null if not found</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSetDictionary.CoreFrameworkMatching(System.String,System.Version,System.Boolean)">
            <summary>
            This is used to find the first core framework matching the specified platform and version or the next
            highest version if not found and redirection is requested.
            </summary>
            <param name="platform">The platform to find.</param>
            <param name="version">The version to find.  This can be a partial version number if redirection is
            requested.</param>
            <param name="withRedirect">True to redirect to the next highest version that is installed or false to
            return the exact match even if not present.</param>
            <returns>The framework settings if found or null if not found</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSetDictionary.CoreFrameworkMostRecent(System.String)">
            <summary>
            This is used to find the most recent core framework matching the specified platform
            </summary>
            <param name="platform">The platform to find</param>
            <returns>The framework settings if found or null if not found</returns>
        </member>
        <member name="M:Sandcastle.Core.Reflection.ReflectionDataSetDictionary.BestMatchFor(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            This is used to find the best match for the given set of framework identifiers
            </summary>
            <param name="frameworks">An enumerable list of platform ID/version pairs</param>
            <returns>The best matching reflection data set or null if one could not be found</returns>
        </member>
        <member name="T:Sandcastle.Core.VisibleItems">
            <summary>
            This public enumerated type defines the optional visible items to include in the help file
            </summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.None">
            <summary>None of the optional items are documented.  Only public types and members will be documented.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.Attributes">
            <summary>Document attributes.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.ExplicitInterfaceImplementations">
            <summary>Document explicit interface implementations.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.InheritedMembers">
            <summary>Document inherited members.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.InheritedFrameworkMembers">
            <summary>Document inherited framework members.  For this to work, <c>InheritedMembers</c> must also
            be enabled.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.InheritedFrameworkInternalMembers">
            <summary>Document inherited internal framework members.  For this to work <c>InheritedFrameworkMembers</c>
            must also be enabled.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.InheritedFrameworkPrivateMembers">
            <summary>Document inherited private framework members.  For this to work <c>InheritedFrameworkMembers</c>
            must also be enabled.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.Internals">
            <summary>Document internal members.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.Privates">
            <summary>Document private members.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.PrivateFields">
            <summary>Document private fields.  For this to work, <c>Privates</c> must also be enabled.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.Protected">
            <summary>Document protected members.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.SealedProtected">
            <summary>Document protected members of sealed classes.  For this to work, <c>Protected</c> must also
            be enabled.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.ProtectedInternalAsProtected">
            <summary>Document "protected internal" members as "protected" only.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.NoPIATypes">
            <summary>Document no-PIA (Primary Interop Assembly) embedded COM types.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.PublicCompilerGenerated">
            <summary>Include public compiler generated types/members.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.EditorBrowsableNever">
            <summary>Document members marked with an <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/>
            set to <c>Never</c>.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.NonBrowsable">
            <summary>Document members marked with a <see cref="T:System.ComponentModel.BrowsableAttribute"/>
            set to <c>False</c>.</summary>
        </member>
        <member name="F:Sandcastle.Core.VisibleItems.InternalAndPrivateIfExternal">
            <summary>Include internal members from other assemblies and private members from base types.  For
            this to work, the internal and/or private member options must also be enabled.  Inherited internal
            and private framework members are not affected by this as they are controlled by the other related
            options.</summary>
        </member>
        <member name="T:Sandcastle.Tools.BuildComponents.FileCreatedEventArgs">
            <summary>
            This event arguments class is used by build components to indicate that they have saved a file of some
            sort (help content or fragment).  The event handler is responsible for figuring out what to do with the
            event.
            </summary>
        </member>
        <member name="P:Sandcastle.Tools.BuildComponents.FileCreatedEventArgs.GroupId">
            <summary>
            This read-only property returns the group ID of the component that saved the file
            </summary>
        </member>
        <member name="P:Sandcastle.Tools.BuildComponents.FileCreatedEventArgs.ComponentId">
            <summary>
            This read-only property returns the ID of the component that saved the file
            </summary>
        </member>
        <member name="P:Sandcastle.Tools.BuildComponents.FileCreatedEventArgs.Key">
            <summary>
            This read-only property returns the topic key or null if not saved while generating a specific topic
            </summary>
        </member>
        <member name="P:Sandcastle.Tools.BuildComponents.FileCreatedEventArgs.FilePath">
            <summary>
            This read-only property returns the path to the saved file
            </summary>
        </member>
        <member name="P:Sandcastle.Tools.BuildComponents.FileCreatedEventArgs.IsContentFile">
            <summary>
            This read-only property indicates whether or not the file is a help content file
            </summary>
        </member>
        <member name="M:Sandcastle.Tools.BuildComponents.FileCreatedEventArgs.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="groupId">The group ID of the component</param>
            <param name="componentId">The component ID</param>
            <param name="key">The topic key</param>
            <param name="filePath">The path to the saved file</param>
            <param name="isContentFile">True if the saved file is a help content file, false if not</param>
        </member>
    </members>
</doc>
